the rete algorithm provides the basis for a more efficient implementation a rete-based expert system builds a network of nodes , where each node ( except the root ) corresponds to a pattern occurring in the left-hand-side ( the condition part ) of a rule each node has a memory of facts which satisfy that pattern as new facts are asserted or modified , they propagate along the network , causing nodes to be annotated when that fact matches that pattern when a fact or combination of facts causes all of the patterns for a given rule to be satisfied , a leaf node is reached and the corresponding rule is triggered rete was first used as the core engine of the ops5 production system language which was used to build early systems including r1 for digital equipment corporation charles forgy has reportedly stated that he adopted the term 'rete ' because of its use in anatomy to describe a network of blood vessels and nerve fibers '' rete algorithm demystified ! – part 1 '' by carole-ann matignon the rete algorithm is designed to sacrifice memory for increased speed in most cases , the speed increase over naïve implementations is several orders of magnitude ( because rete performance is theoretically independent of the number of rules in the system ) a production consists of one or more conditions and a set of actions which may be undertaken for each complete set of facts that match the conditions this , in turn , allows production systems to avoid complete re-evaluation of all facts each time changes are made to the production system 's working memory it allows for efficient removal of memory elements when facts are retracted from working memory they are generally represented at run-time using a network of in-memory objects rete networks act as a type of relational query processor , performing projections , selections and joins conditionally on arbitrary numbers of data tuples when facts are '' asserted '' to working memory , the engine creates working memory elements ( wmes ) for each fact facts are n-tuples , and may therefore contain an arbitrary number of data items each wme may hold an entire n-tuple , or , alternatively , each fact may be represented by a set of wmes where each wme contains a fixed-length tuple each wme enters the rete network at a single root node the root node passes each wme on to its child nodes , and each wme may then be propagated through the network , possibly being stored in intermediate memories , until it arrives at a terminal node if a wme is successfully matched against the conditions represented by one node , it is passed to the next node within the discrimination network , each branch of alpha nodes ( also called 1-input nodes ) terminates at a memory , called an alpha memory each beta node sends its output to a beta memory in this article , however , we will describe data propagation in terms of wme lists , rather than tokens , in recognition of different implementation options and the underlying purpose and use of tokens as any one wme list passes through the beta network , new wmes may be added to it , and the list may be stored in beta memories wme lists that reach the end of a branch of beta nodes represent a complete match for a single production , and are passed to terminal nodes each beta node is associated with two input memories an alpha memory holds wm and performs '' right '' activations on the beta node each time it stores a new wme a beta memory holds wme lists and performs '' left '' activations on the beta node each time it stores a new wme list when a join node is right-activated , it compares one or more attributes of the newly stored wme from its input alpha memory against given attributes of specific wmes in each wme list contained in the input beta memory when a join node is left-activated it traverses a single newly stored wme list in the beta memory , retrieving specific attribute values of given wmes each beta node outputs wme lists which are either stored in a beta memory or sent directly to a terminal node wme lists are stored in beta memories whenever the engine will perform additional left activations on subsequent beta nodes some engines use specialised adapter nodes to connect alpha memories to the left input of beta nodes other engines allow beta nodes to take input directly from two alpha memories , treating one as a '' left '' input and the other as a '' right '' input in order to eliminate node redundancies , any one alpha or beta memory may be used to perform activations on multiple beta nodes as well as join nodes , the beta network may contain additional node types , some of which are described below if a rete contains no beta network , alpha nodes feed tokens , each containing a single wme , directly to p-nodes in this case , there may be no need to store wmes in alpha memories for this reason , most engines support explicit '' halt '' verbs that can be invoked from production action lists existentially negated conditions and conjunctions involve the use of specialised beta nodes that test for non-existence of matching wmes or sets of wmes when changes are made to working memory , a wme list that previously matched no wmes may now match newly asserted wmes thumb most implementations use type nodes to perform the first level of selection on n-tuple working memory elements each memory holds wmes that match a single conditional pattern , and the index is used to reference memories by their pattern for example , when a match is found for one production , this may result in the assertion of new wmes which , in turn , match the conditions for another production in the 1980s , charles forgy developed a successor to the rete algorithm named rete ii it is basically the rete ii engine with an api that allows access to the advisor engine because the advisor engine can access other fico products 