the path from the root node to a leaf node defines a complete rule left-hand-side as new facts are asserted or modified , they propagate along the network , causing nodes to be annotated when that fact matches that pattern when a fact or combination of facts causes all of the patterns for a given rule to be satisfied , a leaf node is reached and the corresponding rule is triggered rete was first used as the core engine of the ops5 production system language which was used to build early systems including r1 for digital equipment corporation '' rete algorithm demystified ! – part 1 '' by carole-ann matignon the rete algorithm is designed to sacrifice memory for increased speed in most cases , the speed increase over naïve implementations is several orders of magnitude ( because rete performance is theoretically independent of the number of rules in the system ) the rete algorithm provides a generalized logical description of an implementation of functionality responsible for matching data tuples ( '' facts '' ) against productions ( '' rules '' ) in a pattern-matching production system ( a category of rule engine ) the rete algorithm exhibits the following major characteristics : it reduces or eliminates certain types of redundancy through the use of node sharing it stores partial matches when performing joins between different fact types it allows for efficient removal of memory elements when facts are retracted from working memory the rete algorithm is widely used to implement matching functionality within pattern-matching engines that exploit a match-resolve-act cycle to support forward chaining and inference when facts are '' asserted '' to working memory , the engine creates working memory elements ( wmes ) for each fact facts are n-tuples , and may therefore contain an arbitrary number of data items each wme may hold an entire n-tuple , or , alternatively , each fact may be represented by a set of wmes where each wme contains a fixed-length tuple the root node passes each wme on to its child nodes , and each wme may then be propagated through the network , possibly being stored in intermediate memories , until it arrives at a terminal node within the discrimination network , each branch of alpha nodes ( also called 1-input nodes ) terminates at a memory , called an alpha memory wmes that fail to match at least one condition in a branch are not materialised within the corresponding alpha memory alpha node branches may fork in order to minimise condition redundancy the '' right '' ( beta ) side of the graph chiefly performs joins between different wmes in descriptions of rete , it is common to refer to token passing within the beta network in this article , however , we will describe data propagation in terms of wme lists , rather than tokens , in recognition of different implementation options and the underlying purpose and use of tokens as any one wme list passes through the beta network , new wmes may be added to it , and the list may be stored in beta memories each terminal node represents a single production , and each wme list that arrives at a terminal node represents a complete set of matching wmes for the conditions in that production for each wme list it receives , a production node will '' activate '' a new production instance on the '' agenda '' a beta memory holds wme lists and performs '' left '' activations on the beta node each time it stores a new wme list when a join node is right-activated , it compares one or more attributes of the newly stored wme from its input alpha memory against given attributes of specific wmes in each wme list contained in the input beta memory when a join node is left-activated it traverses a single newly stored wme list in the beta memory , retrieving specific attribute values of given wmes wme lists are stored in beta memories whenever the engine will perform additional left activations on subsequent beta nodes logically , a beta node at the head of a branch of beta nodes is a special case because it takes no input from any beta memory higher in the network some engines use specialised adapter nodes to connect alpha memories to the left input of beta nodes other engines allow beta nodes to take input directly from two alpha memories , treating one as a '' left '' input and the other as a '' right '' input in both cases , '' head '' beta nodes take their input from two alpha memories in order to eliminate node redundancies , any one alpha or beta memory may be used to perform activations on multiple beta nodes as well as join nodes , the beta network may contain additional node types , some of which are described below if a rete contains no beta network , alpha nodes feed tokens , each containing a single wme , directly to p-nodes once all the current matches have been found , and corresponding production instances have been activated on the agenda , the engine determines an order in which the production instances may be '' fired '' the order may be based on rule priority ( salience ) , rule order , the time at which facts contained in each instance were asserted to the working memory , the complexity of each production , or some other criteria having performed conflict resolution , the engine now '' fires '' the first production instance , executing a list of actions associated with the production however , the sequence of production instance firings may be interrupted at any stage by performing changes to the working memory rule actions can contain instructions to assert or retract wmes from the working memory of the engine the engine undertakes matching of the changed data which , in turn , may result in changes to the list of production instances on the agenda when changes are made to working memory , a wme list that previously matched no wmes may now match newly asserted wmes in many production systems , this is handled by interpreting a single production containing multiple ored patterns as the equivalent of multiple productions however , in order to implement non-equality tests , the rete may contain additional 1-input node networks through which wmes are passed before being placed in a memory the new token now forms the head of the token list , and is stored in the output beta memory each beta node performs its work and , as a result , may create new tokens to hold a list of wmes representing a partial match 