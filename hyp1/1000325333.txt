the rete algorithm provides the basis for a more efficient implementation a rete-based expert system builds a network of nodes , where each node ( except the root ) corresponds to a pattern occurring in the left-hand-side ( the condition part ) of a rule each node has a memory of facts which satisfy that pattern as new facts are asserted or modified , they propagate along the network , causing nodes to be annotated when that fact matches that pattern rete was first used as the core engine of the ops5 production system language which was used to build early systems including r1 for digital equipment corporation charles forgy has reportedly stated that he adopted the term 'rete ' because of its use in anatomy to describe a network of blood vessels and nerve fibers '' rete algorithm demystified ! â€“ part 1 '' by carole-ann matignon the rete algorithm is designed to sacrifice memory for increased speed in very large expert systems , however , the original rete algorithm tends to run into memory and server consumption problems other algorithms , both novel and rete-based , have since been designed which require less memory ( e.g a production consists of one or more conditions and a set of actions which may be undertaken for each complete set of facts that match the conditions this , in turn , allows production systems to avoid complete re-evaluation of all facts each time changes are made to the production system 's working memory the rete algorithm is widely used to implement matching functionality within pattern-matching engines that exploit a match-resolve-act cycle to support forward chaining and inference these networks match rule conditions ( patterns ) to facts ( relational data tuples ) when facts are '' asserted '' to working memory , the engine creates working memory elements ( wmes ) for each fact each wme may hold an entire n-tuple , or , alternatively , each fact may be represented by a set of wmes where each wme contains a fixed-length tuple each wme enters the rete network at a single root node the '' left '' ( alpha ) side of the node graph forms a discrimination network responsible for selecting individual wmes based on simple conditional tests which match wme attributes against constant values nodes in the discrimination network may also perform tests that compare two or more attributes of the same wme hence , all the wmes which represent the same entity type typically traverse a given branch of nodes in the discrimination network wmes that fail to match at least one condition in a branch are not materialised within the corresponding alpha memory the '' right '' ( beta ) side of the graph chiefly performs joins between different wmes as any one wme list passes through the beta network , new wmes may be added to it , and the list may be stored in beta memories wme lists that reach the end of a branch of beta nodes represent a complete match for a single production , and are passed to terminal nodes for each wme list it receives , a production node will '' activate '' a new production instance on the '' agenda '' an alpha memory holds wm and performs '' right '' activations on the beta node each time it stores a new wme it compares these values with attribute values of each wme in the alpha memory each beta node outputs wme lists which are either stored in a beta memory or sent directly to a terminal node some engines use specialised adapter nodes to connect alpha memories to the left input of beta nodes in both cases , '' head '' beta nodes take their input from two alpha memories if a rete contains no beta network , alpha nodes feed tokens , each containing a single wme , directly to p-nodes in this case , there may be no need to store wmes in alpha memories once all the current matches have been found , and corresponding production instances have been activated on the agenda , the engine determines an order in which the production instances may be '' fired '' the order may be based on rule priority ( salience ) , rule order , the time at which facts contained in each instance were asserted to the working memory , the complexity of each production , or some other criteria conflict resolution is not defined as part of the rete algorithm , but is used alongside the algorithm some specialised production systems do not perform conflict resolution by default , the engine will continue to fire each production instance in order until all production instances have been fired however , the sequence of production instance firings may be interrupted at any stage by performing changes to the working memory updates are represented by retracting and then re-asserting the wme the engine undertakes matching of the changed data which , in turn , may result in changes to the list of production instances on the agenda the engine continues to fire production instances , and to enter new match-resolve-act cycles , until no further production instances exist on the agenda as for conflict resolution , the firing of activated production instances is not a feature of the rete algorithm in this approach , negation nodes generally activate further beta nodes directly , rather than storing their output in an additional beta memory for example , when a match is found for one production , this may result in the assertion of new wmes which , in turn , match the conditions for another production in this case , the retraction of one wme may lead to the automatic retraction of additional wmes in order to maintain logical truth assertions in the 1980s , charles forgy developed a successor to the rete algorithm named rete ii in 2010 , forgy developed a new generation of the rete algorithm 