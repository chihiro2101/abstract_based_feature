using the command design pattern can solve these problems : coupling the invoker of a request to a particular request should be avoided using the command design pattern describes the following solution : define separate ( command ) objects that encapsulate a request a class delegates a request to a command object instead of implementing a particular request directly this enables one to configure a class with a command object that is used to perform a request instead , invoker refers to the command interface to perform a request ( command.execute ( ) ) , which makes the invoker independent of how the request is performed the command1 class implements the command interface by performing an action on a receiver ( receiver1.action1 ( ) ) the uml sequence diagram shows the run-time interactions : the invoker object calls execute ( ) on a command1 object command1 calls action1 ( ) on a receiver1 object , which performs the request it can then '' play back '' the same actions by executing the same command objects again in sequence if the program embeds a scripting engine , each command object can implement a method , and user actions can then be easily recorded as scripts ; multi-level undo : if all user actions in a program are implemented as command objects , the program can keep a stack of the most recently executed commands when the user wants to undo a command , the program simply pops the most recent command object and executes its method the items in the queue are command objects it may refer to running the code identified by the command object 's execute method there is only one copycommand object ) , which knows about shortcut keys , button images , command text , etc a source/invoker object calls the command/action object 's execute/performaction method on the other hand , if the code is defined by the command object itself , the target object will be a different object entirely command object , routed event arguments , event object : the object that is passed from the source to the command/action object , to the target object to the code that does the work 