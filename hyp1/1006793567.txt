the requirements of an ordinary prng are also satisfied by a cryptographically secure prng , but the reverse is not true csprng requirements fall into two groups : first , that they pass statistical randomness tests ; and secondly , that they hold up well under serious attack , even when part of their initial or running state becomes available to an attacker that is , given the first k bits of a random sequence , there is no polynomial-time algorithm that can predict the ( k +1 ) th bit with probability of success non-negligibly better than 50 % additionally , if there is an entropy input while running , it should be infeasible to use knowledge of the input 's state to predict future conditions of the csprng state : when the maximum number of bits output from this prng is equal to the 2 blocksize , the resulting output delivers the mathematically expected security level that the key size would be expected to generate , but the output is shown to not be indistinguishable from a true random number generator when the maximum number of bits output from this prng is less than it , the expected security level is delivered and the output appears to be indistinguishable from a true random number generator : it is noted in the next revision that claimed security strength for ctr_drbg depends on limiting the total number of generate requests and the bits provided per generate request there are also standards for statistical testing of new csprng designs : a statistical test suite for random and pseudorandom number generators , nist special publication 800-22 a security analysis of the nist sp 800-90 elliptic curve random number generator , daniel r analysis of the linux random number generator , zvi gutterman and benny pinkas and tzachy reinman 