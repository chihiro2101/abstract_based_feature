csprng requirements fall into two groups : first , that they pass statistical randomness tests ; and secondly , that they hold up well under serious attack , even when part of their initial or running state becomes available to an attacker andrew yao proved in 1982 that a generator passing the next-bit test will pass all other polynomial-time statistical tests for randomness in the event that part or all of its state has been revealed ( or guessed correctly ) , it should be impossible to reconstruct the stream of random numbers prior to the revelation additionally , if there is an entropy input while running , it should be infeasible to use knowledge of the input 's state to predict future conditions of the csprng state ) however , this algorithm is not cryptographically secure ; an attacker who determines which bit of pi ( i.e specialized statistical tests may be found specially tuned to such a prng that shows the random numbers not to be truly random second , for most prngs , when their state has been revealed , all past random numbers can be retrodicted , allowing an attacker to read all past messages , as well as future ones there are also standards for statistical testing of new csprng designs : a statistical test suite for random and pseudorandom number generators , nist special publication 800-22 , randomness requirements for security java '' entropy pool '' for cryptographically secure unpredictable random numbers a security analysis of the nist sp 800-90 elliptic curve random number generator , daniel r 