the requirements of an ordinary prng are also satisfied by a cryptographically secure prng , but the reverse is not true csprng requirements fall into two groups : first , that they pass statistical randomness tests ; and secondly , that they hold up well under serious attack , even when part of their initial or running state becomes available to an attacker that is , given the first k bits of a random sequence , there is no polynomial-time algorithm that can predict the ( k +1 ) th bit with probability of success non-negligibly better than 50 % andrew yao proved in 1982 that a generator passing the next-bit test will pass all other polynomial-time statistical tests for randomness : : example : if the csprng under consideration produces output by computing bits of π in sequence , starting from some unknown point in the binary expansion , it may well satisfy the next-bit test and thus be statistically random , as π appears to be a random sequence first , while most prngs outputs appear random to assorted statistical tests , they do not resist determined reverse engineering specialized statistical tests may be found specially tuned to such a prng that shows the random numbers not to be truly random when the maximum number of bits output from this prng is less than it , the expected security level is delivered and the output appears to be indistinguishable from a true random number generator , randomness requirements for security java '' entropy pool '' for cryptographically secure unpredictable random numbers cryptographically secure random number on windows without using cryptoapi conjectured security of the ansi-nist elliptic curve rng , daniel r 