the requirements of an ordinary prng are also satisfied by a cryptographically secure prng , but the reverse is not true csprng requirements fall into two groups : first , that they pass statistical randomness tests ; and secondly , that they hold up well under serious attack , even when part of their initial or running state becomes available to an attacker andrew yao proved in 1982 that a generator passing the next-bit test will pass all other polynomial-time statistical tests for randomness in the event that part or all of its state has been revealed ( or guessed correctly ) , it should be impossible to reconstruct the stream of random numbers prior to the revelation additionally , if there is an entropy input while running , it should be infeasible to use knowledge of the input 's state to predict future conditions of the csprng state first , while most prngs outputs appear random to assorted statistical tests , they do not resist determined reverse engineering when the maximum number of bits output from this prng is less than it , the expected security level is delivered and the output appears to be indistinguishable from a true random number generator , randomness requirements for security java '' entropy pool '' for cryptographically secure unpredictable random numbers a security analysis of the nist sp 800-90 elliptic curve random number generator , daniel r cryptanalysis of the dual elliptic curve pseudorandom generator , berry schoenmakers and andrey sidorenko , iacr eprint 2006/190 