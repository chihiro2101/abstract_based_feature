a symbolic link contains a text string that is automatically interpreted and followed by the operating system as a path to another file or directory the symbolic link is a second file that exists independently of its target if a symbolic link points to a target , and sometime later that target is moved , renamed or deleted , the symbolic link is not automatically updated or deleted , but continues to exist and still points to the old target , now a non-existing location or file hard links do not link paths on different volumes or file system , whereas symbolic links may point to any file or directory irrespective of the volumes on which the link and target reside hard links always refer to an existing file , whereas symbolic links may contain an arbitrary path that does not point to anything symbolic links operate transparently for many operations : programs that read or write to files named by a symbolic link will behave as if operating directly on the target file some unix as well as linux distributions use symbolic links extensively in an effort to reorder the file system hierarchy usually the target will exist , although symbolic links may be created to non-existent targets after creating the symbolic link , it may generally be treated as an alias for the target , cp , rm ) may be used on the symbolic link when a directory listing of a symbolic link that points to a directory is requested , only the link itself will be displayed the file contained the textual reference to the link 's target , and the file mode bits indicated that the type of the file is a symbolic link only when a link points to a file in the same directory do '' fast symlinks '' provide significantly better performance than other symlinks however , the posix standard does not require the entire set of file status information common to regular files to be implemented for symlinks the file system permissions of a symbolic link are not used ; the access modes of the target file are controlled by the target file 's own permissions some operating systems , such as freebsd , offer the ability to modify file permissions and filesystem attributes of a symbolic link , through lchmod and lchflags system calls respectively third-party drivers are required to enable support for ntfs symbolic links in windows xp unlike junction points , a symbolic link can also point to a file or remote server message block ( smb ) network path additionally , the ntfs symbolic link implementation provides full support for cross-filesystem links symbolic links , msdn library , win32 and com development , 2008-01-18 however , the implementation varies from unix symbolic links in several ways mark russinovich : inside the windows vista kernel : part 1 â€“ file-based symbolic links , microsoft technet , february 2007 unlike symbolic links , windows shortcuts maintain their references to their targets even when the target is moved or renamed the command creating symbolic links is makelink , which is also used for hard links symbolic drivers for windows xp : file system drivers to enables symbolic links for windows xp ( also mirrored on link shell extension site ) 