a symbolic link contains a text string that is automatically interpreted and followed by the operating system as a path to another file or directory the symbolic link is a second file that exists independently of its target if a symbolic link points to a target , and sometime later that target is moved , renamed or deleted , the symbolic link is not automatically updated or deleted , but continues to exist and still points to the old target , now a non-existing location or file symbolic links pointing to moved or non-existing targets are sometimes called broken , orphaned , dead , or dangling hard links do not link paths on different volumes or file system , whereas symbolic links may point to any file or directory irrespective of the volumes on which the link and target reside hard links always refer to an existing file , whereas symbolic links may contain an arbitrary path that does not point to anything symbolic links operate transparently for many operations : programs that read or write to files named by a symbolic link will behave as if operating directly on the target file however , they have the effect of changing an otherwise hierarchic filesystem from a tree into a directed graph , which can have consequences for such simple operations as determining the current directory of a process some shells heuristically try to uphold the illusion of a tree-shaped hierarchy , but when they do , this causes them to produce different results from other programs that manipulate pathnames without such heuristic , relying on the operating system instead some unix as well as linux distributions use symbolic links extensively in an effort to reorder the file system hierarchy posix and unix-like operating systems in posix-compliant operating systems , symbolic links are created with the symlink symlink , symlinkat when the ln -s flag is specified , the symlink ( ) system call is used instead , creating a symbolic link the posix directory listing application , ls , denotes symbolic links with an arrow after the name , pointing to the name of the target file ( see following example ) , when the long directory list is requested ( -l option ) in order to obtain a listing of the linked directory , the path must include a trailing directory separator character ( '/ ' , slash ) the file contained the textual reference to the link 's target , and the file mode bits indicated that the type of the file is a symbolic link systems with fast symlinks often fall back to using the original method if the target path exceeds the available inode space it is also used for disk compatibility with other or older versions of operating systems symbolic links are designed to aid in migration and application compatibility with posix operating systems symbolic links , msdn library , win32 and com development , 2008-01-18 however , the implementation varies from unix symbolic links in several ways unlike symbolic links , windows shortcuts maintain their references to their targets even when the target is moved or renamed in the os/2 operating system , symbolic links somewhat resemble shadows in the graphical workplace shell this allows some flexibility in filesystem order that is not possible with a standard symbolic link symbolic drivers for windows xp : file system drivers to enables symbolic links for windows xp ( also mirrored on link shell extension site ) 