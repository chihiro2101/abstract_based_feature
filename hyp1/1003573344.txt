a symbolic link contains a text string that is automatically interpreted and followed by the operating system as a path to another file or directory the symbolic link is a second file that exists independently of its target if a symbolic link points to a target , and sometime later that target is moved , renamed or deleted , the symbolic link is not automatically updated or deleted , but continues to exist and still points to the old target , now a non-existing location or file symbolic links pointing to moved or non-existing targets are sometimes called broken , orphaned , dead , or dangling symbolic links are different from hard links hard links do not link paths on different volumes or file system , whereas symbolic links may point to any file or directory irrespective of the volumes on which the link and target reside hard links always refer to an existing file , whereas symbolic links may contain an arbitrary path that does not point to anything symbolic links operate transparently for many operations : programs that read or write to files named by a symbolic link will behave as if operating directly on the target file even the unix standard for navigating to a directory 's parent directory no longer works reliably in the face of symlinks in posix-compliant operating systems , symbolic links are created with the symlink symlink , symlinkat the ln shell command normally uses the link link , linkat when the ln -s flag is specified , the symlink ( ) system call is used instead , creating a symbolic link the following command creates a symbolic link at the command-line interface ( shell ) : ln -s target_path link_path target_path is the relative or absolute path to which the symbolic link should point the rm ( delete file ) command , however , removes the link itself , not the target file early implementations of symbolic links stored the symbolic link information as data in regular files the file contained the textual reference to the link 's target , and the file mode bits indicated that the type of the file is a symbolic link the file system permissions of a symbolic link are not used ; the access modes of the target file are controlled by the target file 's own permissions ntfs 3.1 introduced support for symbolic links for any type of file third-party drivers are required to enable support for ntfs symbolic links in windows xp symbolic links are designed to aid in migration and application compatibility with posix operating systems symbolic links , msdn library , win32 and com development , 2008-01-18 however , the implementation varies from unix symbolic links in several ways additionally , ntfs symbolic links to files are distinct from ntfs symbolic links to directories and therefore can not be used interchangeably , unlike on posix where the same symbolic link can refer to either files or directories the command creating symbolic links is makelink , which is also used for hard links symbolic drivers for windows xp : file system drivers to enables symbolic links for windows xp ( also mirrored on link shell extension site ) 