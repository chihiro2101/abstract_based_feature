the intel 8086 , the predecessor to the 286 , was originally designed with a 20-bit address bus for its memory at the time , 1 megabyte was considered a relatively large amount of memory , so the designers of the ibm personal computer reserved the first 640 kilobytes for use by applications and the operating system and upper memory area for the bios ( basic input/output system ) and memory for peripheral the initial protected mode , released with the 286 , was not widely used ; for example , it was used by microsoft xenix ( around 1984 ) , coherent and minix several shortcomings such as the inability to access the bios or dos calls due to inability to switch back to real mode without resetting the processor prevented widespread usage real mode functioned virtually identically to the 8086 , allowing the vast majority of existing 8086 software to run unmodified on the newer 286 real mode also served as a more basic mode in which protected mode could be set up , solving a sort of chicken-and-egg problem to access the extended functionality of the 286 , the operating system would set up some tables in memory that controlled memory access in protected mode , set the addresses of those tables into some special registers of the processor , and then set the processor into protected mode in addition to the increased size of the address bus and segment registers , many other new features were added with the intention of increasing operational security and stability furthermore , learning from the failures of the 286 protected mode to satisfy the needs for multiuser dos , intel added a separate virtual 8086 mode , charles petzold , intel 's 32-bit wonder : the 80386 microprocessor , pc magazine , november 25 , 1986 , pp with the release of the 386 , the following additional features were added to protected mode : paging 32-bit physical and virtual address space ( the 32-bit physical address space is not present on the 80386sx , and other 386 processor variants which use the older 286 bus ) 32-bit segment offsets ability to switch back to real mode without resetting virtual 8086 mode until the release of the 386 , protected mode did not offer a direct method to switch back into real mode once protected mode was entered to enter protected mode , the global descriptor table ( gdt ) must first be created with a minimum of three entries : a null descriptor , a code segment descriptor and data segment descriptor with the release of the 386 , protected mode could be exited by loading the segment registers with real mode values , disabling the a20 line and clearing the pe bit in the cr0 register , without the need to perform the initial setup steps required with the 286 protected mode has a number of features designed to enhance an operating system 's control over application software , in order to increase security and system stability with the release of the 386 , protected mode offers what the intel manuals call virtual 8086 mode programs that require segment manipulation , privileged instructions , direct hardware access , or use self-modifying code will generate an exception that must be served by the operating system in addition , applications running in virtual 8086 mode generate a trap with the use of instructions that involve input/output ( i/o ) , which can negatively impact performance due to these limitations , some programs originally designed to run on the 8086 can not be run in virtual 8086 mode for maintaining compatibility with 286 protected mode a new default flag ( d-bit , for short ) was added in addition to adding virtual 8086 mode , the 386 also added paging to protected mode windows & nbsp ; 3.0 was able to run real mode programs in 16-bit protected mode ; when switching to protected mode , it decided to preserve the single privilege level model that was used in real mode , which is why windows applications and dlls can hook interrupts and do direct hardware access however , 64-bit operating systems ( which run in long mode ) no longer use this , since virtual 8086 mode has been removed from long mode . 