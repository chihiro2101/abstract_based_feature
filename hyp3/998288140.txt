external iterators and the iterator pattern an external iterator may be thought of as a type of pointer that has two primary operations : referencing one particular element in the object collection ( called element access ) , and modifying itself so it points to the next element ( called element traversal ) there must also be a way to create an iterator so it points to some first element as well as some way to determine when the iterator has exhausted all of the elements in the container depending on the language and intended use , iterators may also provide additional operations or exhibit different behaviors the primary purpose of an iterator is to allow a user to process every element of a container while isolating the user from the internal structure of the container in python , a generator is an iterator constructor : a function that returns an iterator implicit iterators are often manifested by a '' foreach '' statement ( or equivalent ) , such as in the following python example : for value in iterable : print ( value ) in python , an iterable is an object which can be converted to an iterator , which is then iterated through during the for loop ; this is done implicitly an iterator may allow the container object to be modified without invalidating the iterator this assertion must however be taken with a grain of salt , because more often than not , for efficiency reasons , the iterator implementation is so tightly bound to the container that it does preclude modification of the underlying container without invalidating itself this is usually not desirable , because many algorithms using the iterators invoke the iterators data access operation more often than the advance method watt iterators boost c++ iterator library java interface php : object iteration stl iterators what are iterators ? - reference description 