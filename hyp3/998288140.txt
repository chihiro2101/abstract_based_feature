, implementing the traversal across a container , applying the given function to every element in turn there must also be a way to create an iterator so it points to some first element as well as some way to determine when the iterator has exhausted all of the elements in the container depending on the language and intended use , iterators may also provide additional operations or exhibit different behaviors the primary purpose of an iterator is to allow a user to process every element of a container while isolating the user from the internal structure of the container there are subtle differences and distinctions in the use of the terms '' generator '' and '' iterator '' , which vary between authors and languages in python , a generator is an iterator constructor : a function that returns an iterator these functions still require explicit iterator objects as their initial input , but the subsequent iteration does not expose an iterator object to the user an iterator may allow the container object to be modified without invalidating the iterator this assertion must however be taken with a grain of salt , because more often than not , for efficiency reasons , the iterator implementation is so tightly bound to the container that it does preclude modification of the underlying container without invalidating itself design pattern iteration iterator pattern range visitor pattern pointer ( computer programming ) watt iterators boost c++ iterator library java interface php : object iteration stl iterators what are iterators ? - reference description 