an external iterator may be thought of as a type of pointer that has two primary operations : referencing one particular element in the object collection ( called element access ) , and modifying itself so it points to the next element ( called element traversal ) there must also be a way to create an iterator so it points to some first element as well as some way to determine when the iterator has exhausted all of the elements in the container depending on the language and intended use , iterators may also provide additional operations or exhibit different behaviors the primary purpose of an iterator is to allow a user to process every element of a container while isolating the user from the internal structure of the container in python , a generator is an iterator constructor : a function that returns an iterator an actual iterator object may exist in reality , but if it does it is not exposed within the source code of the language implicit iterators are often manifested by a '' foreach '' statement ( or equivalent ) , such as in the following python example : for value in iterable : print ( value ) in python , an iterable is an object which can be converted to an iterator , which is then iterated through during the for loop ; this is done implicitly an iterator may allow the container object to be modified without invalidating the iterator the ability of a container to be modified while iterating through its elements has become necessary in modern object-oriented programming , where the interrelationships between objects and the effects of operations may not be obvious since the number of iterators at a given time may be arbitrarily large in comparison to the size of the tied container , updating them all will drastically impair the complexity guarantee on the container 's operations watt iterators boost c++ iterator library java interface php : object iteration stl iterators what are iterators ? - reference description 