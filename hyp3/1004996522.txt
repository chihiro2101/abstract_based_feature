'' high-level language '' refers to the higher level of abstraction from machine language unlike low-level assembly languages , high-level languages have few , if any , language elements that translate directly into a machine 's native opcodes other features , such as string handling routines , object-oriented language features , and file input/output , may also be present that is , unlike low-level languages like assembly or machine language , high-level programming can amplify the programmer 's instructions and trigger a lot of data movements in the background without their knowledge for this reason , code which needs to run particularly quickly and efficiently may require the use of a lower-level language , even if a higher-level language would make the coding easier an example of this is scala which maintains backward compatibility with java which means that programs and libraries written in java will continue to be usable even if a programming shop switches to scala ; this makes the transition easier and the lifespan of such high-level coding indefinite : ; intermediate representations : when code written in a language is compiled to an intermediate representation , that representation can be optimized or saved for later execution without the need to re-read the source file ; source-to-source translated or transcompiled : code written in a language may be translated into terms of a lower-level language for which native code compilers are already common alternatively , it is possible for a high-level language to be directly implemented by a computer – the computer directly executes the hll code this is known as a high-level language computer architecture – the computer architecture itself is designed to be targeted by a specific high-level language 