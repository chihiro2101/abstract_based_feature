'' high-level language '' refers to the higher level of abstraction from machine language unlike low-level assembly languages , high-level languages have few , if any , language elements that translate directly into a machine 's native opcodes that is , unlike low-level languages like assembly or machine language , high-level programming can amplify the programmer 's instructions and trigger a lot of data movements in the background without their knowledge high-level languages intend to provide features which standardize common tasks , permit rich debugging , and maintain architectural agnosticism ; while low-level languages often produce more efficient code through optimization for a specific system architecture high-level programming exhibits features like more generic data structures and operations , run-time interpretation , and intermediate code files ; which often result in execution of far more operations than necessary , higher memory consumption , and larger binary program size for this reason , code which needs to run particularly quickly and efficiently may require the use of a lower-level language , even if a higher-level language would make the coding easier there are three general modes of execution for modern high-level languages : ; interpreted : when code written in a language is interpreted , its syntax is read and then executed directly , with no compilation stage there are two types of compilation : : ; machine code generation : some compilers compile source code directly into machine code virtual machines that execute bytecode directly or transform it further into machine code have blurred the once clear distinction between intermediate representations and truly compiled languages this is known as a high-level language computer architecture â€“ the computer architecture itself is designed to be targeted by a specific high-level language 