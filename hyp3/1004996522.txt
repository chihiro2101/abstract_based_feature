'' high-level language '' refers to the higher level of abstraction from machine language unlike low-level assembly languages , high-level languages have few , if any , language elements that translate directly into a machine 's native opcodes one thing to note about high-level programming languages is that these languages allow the programmer to be detached and separated from the machine that is , unlike low-level languages like assembly or machine language , high-level programming can amplify the programmer 's instructions and trigger a lot of data movements in the background without their knowledge for this reason , code which needs to run particularly quickly and efficiently may require the use of a lower-level language , even if a higher-level language would make the coding easier in many cases , critical portions of a program mostly in a high-level language can be hand-coded in assembly language , leading to a much faster , more efficient , or simply reliably functioning optimised program some decades ago , the c language , and similar languages , were most often considered '' high-level '' , as it supported concepts such as expression evaluation , parameterised recursive functions , and data types and structures , while assembly language was considered '' low-level '' there are three general modes of execution for modern high-level languages : ; interpreted : when code written in a language is interpreted , its syntax is read and then executed directly , with no compilation stage ; source-to-source translated or transcompiled : code written in a language may be translated into terms of a lower-level language for which native code compilers are already common this is known as a high-level language computer architecture â€“ the computer architecture itself is designed to be targeted by a specific high-level language 