'' high-level language '' refers to the higher level of abstraction from machine language unlike low-level assembly languages , high-level languages have few , if any , language elements that translate directly into a machine 's native opcodes one thing to note about high-level programming languages is that these languages allow the programmer to be detached and separated from the machine that is , unlike low-level languages like assembly or machine language , high-level programming can amplify the programmer 's instructions and trigger a lot of data movements in the background without their knowledge high-level languages intend to provide features which standardize common tasks , permit rich debugging , and maintain architectural agnosticism ; while low-level languages often produce more efficient code through optimization for a specific system architecture high-level languages are designed independent of a specific computing system architecture this facilitates executing a program written in such a language on any computing system with compatible support for the interpreted or jit program this is the original mode of compilation , and languages that are directly and completely transformed to machine-native code in this way may be called truly compiled languages ; source-to-source translated or transcompiled : code written in a language may be translated into terms of a lower-level language for which native code compilers are already common this is known as a high-level language computer architecture â€“ the computer architecture itself is designed to be targeted by a specific high-level language 