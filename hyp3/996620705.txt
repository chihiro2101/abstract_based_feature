while computer simulation needs to simulate real-world physics as precisely as possible , computer games need to simulate real-world physics in an acceptable way , in real time and robustly collision detection in computer simulation some simulators estimate the time of collision by linear interpolation , roll back the simulation , and calculate the collision by the more abstract methods of conservation laws collision detection utilizes time coherence to allow even finer time steps without much increasing cpu demand , such as in air traffic control after an inelastic collision , special states of sliding and resting can occur and , for example , the open dynamics engine uses constraints to simulate them in other words , physical simulators usually function one of two ways , where the collision is detected a posteriori ( after the collision occurs ) or a priori ( before the collision occurs ) in addition to the a posteriori and a priori distinction , almost all modern collision detection algorithms are broken into a hierarchy of algorithms in the a posteriori case , the physical simulation is advanced by a small step , then checked to see if any objects are intersecting or visibly considered intersecting at each simulation step , a list of all intersecting bodies is created , and the positions and trajectories of these objects are '' fixed '' to account for the collision this method is called a posteriori because it typically misses the actual instant of collision , and only catches the collision after it has actually happened this is called a priori because the collision detection algorithm calculates the instants of collision before it updates the configuration of the physical bodies in this case , the collision detection algorithm need not be aware of the myriad of physical variables ; a simple list of physical bodies is fed to the algorithm , and the program returns a list of intersecting bodies in addition , the a posteriori algorithms are in effect one dimension simpler than the a priori algorithms it is difficult ( but not completely impossible ) to separate the physical simulation from the collision detection algorithm some objects are in resting contact , that is , in collision , but neither bouncing off , nor interpenetrating , such as a vase resting on a table a common algorithm for collision detection of bounding boxes is sweep and prune despite this resource limit , and the use of relatively primitive collision detection algorithms , programmers have been able to create believable , if inexact , systems for use in games in many cases for video games , approximating the characters by a point is sufficient for the purpose of collision detection with the environment these are the hallmarks of a failing collision detection and physical simulation system steven cameron ( oxford university ) web site on collision detection how to avoid a collision by george beck , wolfram demonstrations project 