dht research was originally motivated , in part , by peer-to-peer ( p2p ) systems such as freenet , gnutella , bittorrent and napster , which took advantage of resources distributed across the internet to provide a single useful application freenet is fully distributed , but employs a heuristic key-based routing in which each file is associated with a key , and files with similar keys tend to cluster on a similar set of nodes queries are likely to be routed through the network to such a cluster without needing to visit many peers distributed hash tables use a more structured key-based routing in order to attain both the decentralization of freenet and gnutella , and the efficiency and guaranteed results of napster dhts characteristically emphasize the following properties : decentralized computing : the nodes collectively form the system without any central coordination scalability : the system should function efficiently even with thousands or millions of nodes a key technique used to achieve these goals is that any one node needs to coordinate with only a few other nodes in the system – most commonly , o ( log n ) of the n participants ( see below ) – so that only a limited amount of work needs to be done for each change in membership and to allow participants to remain anonymity , though this is less common than in many other peer-to-peer ( especially file sharing ) systems ; see anonymous p2p finally , dhts must deal with more traditional distributed systems issues such as load balancing , data integrity , and performance ( in particular , ensuring that operations such as routing and data storage or retrieval complete quickly ) to index a file with given and in the dht , the sha-1 hash of is generated , producing a 160-bit key , and a message is sent to any node participating in the dht the message is forwarded from node to node through the overlay network until it reaches the single node responsible for key as specified by the keyspace partitioning any other client can then retrieve the contents of the file by again hashing to produce and asking any dht node to find the data associated with with a message the keyspace partitioning and overlay network components are described below with the goal of capturing the principal ideas common to most dhts ; many designs differ in the details most dhts use some variant of consistent hashing or rendezvous hashing to map keys to nodes the two algorithms appear to have been devised independently and simultaneously to solve the distributed hash table problem both consistent hashing and rendezvous hashing have the essential property that removal or addition of one node changes only the set of keys owned by the nodes with adjacent ids , and leaves all other nodes unaffected each node is assigned a single key called its identifier ( id ) two systems that are based on this approach are structella , which implements flooding and random walks on a pastry overlay , and dq-dht , which implements a dynamic querying search algorithm over a chord network in some dhts , publishing of nodes ' ids is also used to optimize dht operations usually , rather than selecting just one node , real world dht algorithms select suitable nodes , with being an implementation-specific parameter of the dht in some dht designs , nodes agree to handle a certain keyspace range , the size of which may be chosen dynamically , rather than hard-coded of course , such an algorithm requires nodes to publish their presence data in the dht so the iterative lookups can be performed apache cassandra baton overlay mainline dht – standard dht used by bittorrent ( based on kademlia as provided by khashmir ) tribler wiki retrieved january 2010 