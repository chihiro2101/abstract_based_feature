dht research was originally motivated , in part , by peer-to-peer ( p2p ) systems such as freenet , gnutella , bittorrent and napster , which took advantage of resources distributed across the internet to provide a single useful application gnutella and similar networks moved to a query flooding model in essence , each search would result in a message being broadcast to every other machine in the network freenet is fully distributed , but employs a heuristic key-based routing in which each file is associated with a key , and files with similar keys tend to cluster on a similar set of nodes distributed hash tables use a more structured key-based routing in order to attain both the decentralization of freenet and gnutella , and the efficiency and guaranteed results of napster a project called the infrastructure for resilient internet systems ( iris ) was funded by a 12 million grant from the united states national science foundation in 2002 outside academia , dht technology has been adopted as a component of bittorrent and in the coral content distribution network fault tolerance : the system should be reliable ( in some sense ) even with nodes continuously joining , leaving , and failing and to allow participants to remain anonymity , though this is less common than in many other peer-to-peer ( especially file sharing ) systems ; see anonymous p2p to index a file with given and in the dht , the sha-1 hash of is generated , producing a 160-bit key , and a message is sent to any node participating in the dht the message is forwarded from node to node through the overlay network until it reaches the single node responsible for key as specified by the keyspace partitioning any other client can then retrieve the contents of the file by again hashing to produce and asking any dht node to find the data associated with with a message the keyspace partitioning and overlay network components are described below with the goal of capturing the principal ideas common to most dhts ; many designs differ in the details the two algorithms appear to have been devised independently and simultaneously to solve the distributed hash table problem both consistent hashing and rendezvous hashing have the essential property that removal or addition of one node changes only the set of keys owned by the nodes with adjacent ids , and leaves all other nodes unaffected each node is assigned a single key called its identifier ( id ) many dhts use that flexibility to pick neighbors that are close in terms of latency in the physical underlying network '' distributed k-ary system : algorithms for distributed hash tables '' , most notable differences encountered in practical instances of dht implementations include at least the following : the address space is a parameter of dht for example , key could be the node and associated data could describe how to contact this node in some dht designs , nodes agree to handle a certain keyspace range , the size of which may be chosen dynamically , rather than hard-coded of course , such an algorithm requires nodes to publish their presence data in the dht so the iterative lookups can be performed using bucket sort , this can be done in , where is the number of nodes in the dht apache cassandra baton overlay mainline dht â€“ standard dht used by bittorrent ( based on kademlia as provided by khashmir ) tribler wiki retrieved january 2010 