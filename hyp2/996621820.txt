curry 's paradox uses a particular kind of self-referential conditional sentence , as demonstrated in this example : even though germany does not border china , the example sentence certainly is a natural-language sentence , and so the truth of that sentence can be analyzed first , common natural-language proof techniques can be used to prove that the example sentence is true second , the truth of the example sentence can be used to prove that germany borders china the claim '' germany borders china '' could be replaced by any other claim , and the sentence would still be provable because the proof uses only well-accepted methods of deduction , and because none of these methods appears to be incorrect , this situation is paradoxical in this method , in order to prove '' if a , then b '' , first a is assumed and then with that assumption b is shown to be true to produce curry 's paradox , as described in the two steps above , apply this method to the sentence '' if this sentence is true , then germany borders china '' therefore b is true , by modus ponens , and we have proven '' if this sentence is true , then 'germany borders china ' is true now , because we have proved '' if this sentence is true , then 'germany borders china ' is true '' , then we can again apply modus ponens , because we know that the claim '' this sentence is true '' is correct the example in the previous section used unformalized , natural-language reasoning curry 's paradox also occurs in some varieties of formal logic curry 's paradox and other paradoxes arise in lambda calculus because of the inconsistency of lambda calculus considered as a deductive system when translating expressions from mathematics to lambda calculus , the domain of lambda calculus terms is not always isomorphic to the domain of the mathematical expressions the argument in formal logic starts with assuming the validity of naming ( x → y ) as x russell 's paradox girard 's paradox kleene–rosser paradox liar paradox list of paradoxes richard 's paradox zermelo–fraenkel set theory fixed-point combinator deductive lambda calculus let expression 