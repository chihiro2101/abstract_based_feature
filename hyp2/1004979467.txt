unpredictable random numbers were first investigated in the context of gambling , and many randomizing devices such as dice , shuffling playing cards , and roulette wheels , were first developed for such use fairly produced random numbers are vital to electronic gambling and ways of creating them are sometimes regulated by governmental gaming commissions random numbers are also used for non-gambling purposes , both where their use is mathematically important , such as sampling for opinion polls , and in situations where fairness is approximated by randomization , such as conscription and selecting jurors the major use for hardware random number generators is in the field of data encryption , for example to create random cryptographic keys and nonces needed to encrypt and sign data they are a more secure alternative to pseudorandom number generators ( prngs ) , software programs commonly used in computers to generate '' random '' numbers although these pseudorandom sequences pass randomness tests , by knowing the algorithm and the conditions used to initialize it , called the '' seed '' , the output can be predicted because the sequence of numbers produced by a prng is in principle predictable , data encrypted with pseudorandom numbers is potentially vulnerable to cryptanalysis hardware random number generators produce sequences of numbers that are assumed not to be predictable , and therefore provide the greatest security when used to encrypt data one early way of producing random numbers was by a variation of the same machines used to play keno or select lottery numbers twenty of the 32 possible counter values were mapped onto the 10 decimal digits and the other 12 counter values were discarded . the results of a long run from the rand machine , filtered and tested , were converted into a table , which was published in 1955 in the book a million random digits with 100,000 normal deviates the rand table was a significant breakthrough in delivering random numbers because such a large and carefully prepared table had never before been available there are two fundamental sources of practical quantum mechanics physical randomness : quantum mechanics at the atomic or sub-atomic level and thermal noise ( some of which is quantum mechanical in origin ) and , because the world exists at a temperature above absolute zero , every system has some random variation in its state ; for instance , molecules of gases composing air are constantly bouncing off each other in a random way ( see statistical mechanics ) this randomness is a quantum phenomenon as well ( see phonon ) because the outcome of quantum-mechanical events can not be predicted even in principle , they are the ‘ gold standard ’ for random number generation some quantum phenomena used for random number generation include : shot noise , a quantum mechanical noise source in electronic circuits they are somewhat vulnerable to attack by lowering the temperature of the system , though most systems will stop operating at temperatures low enough to reduce noise by a factor of two ( e.g some of the thermal phenomena used include : thermal noise from a resistor , amplified to provide a random voltage source when several such sources are combined carefully ( as in , for example , the yarrow algorithm or fortuna csprngs ) , enough entropy can be collected for the creation of cryptographic keys and nonces , though generally at restricted rates the primary source of randomness typically used in such approaches is the precise timing of the interrupts caused by mechanical input/output devices , such as keyboards and disk drives , various system information counters , etc instead of using thermal noise , raw bits are generated by using four freerunning oscillators which are designed to run at different rates minor variations in temperature , silicon characteristics , and local electrical conditions cause continuing oscillator speed variations and thus produce the entropy of the raw bits another then enters a while loop waiting for the alarm to trigger truerand does n't require additional hardware , but in a multi-tasking system great care must be taken to avoid non-randomizing interference from other processes ( e.g , in the suspension of the counting loop process as the operating system scheduler starts and stops assorted processes ) the rdrand opcode will return values from an onboard hardware random number generator the first is to design the rng to minimize bias inherent in the operation of the generator the basic design is to maintain an '' entropy pool '' of random bits that are assumed to be unknown to an attacker some of the strategies in use include : when random bits are requested , return that many bits derived from the entropy pool ( by a cryptographic hash function , say ) and decrement the estimate of the number of random bits remaining in the pool a true random number generator can be a ( de ) central service just as with other components of a cryptography system , a software random number generator should be designed to resist certain attacks these are useful for determining if there is enough entropy in a seed pool , for example , but they can not , in general , distinguish between a true random source and a pseudorandom generator 