uucp used the computers ' modems to dial out to other computers , establishing temporary , point-to-point links between them each system in a uucp network has a list of neighbor systems , with phone numbers , login names and passwords , etc when work ( file transfer or command execution requests ) is queued for a neighbor system , the program typically calls that system to process the work the program can also poll its neighbors periodically to check for work queued on their side ; this permits neighbors without dial-out capability to participate over time , dial-up links were replaced by internet connections , and uucp added a number of new link layer protocols these newer connections also reduced the need for uucp at all , as newer application protocols developed to take advantage of the new networks today , uucp is rarely used over dial-up links , but is occasionally used over tcp/ip uucp 's longevity can be attributed to its low cost , extensive logging , native failover to dialup , and persistent queue management uucp is normally started by having a user log into the target system and then running the uucp program thus , for automated transfers , another machine simply has to open a modem connection to the called machine and log into the known account when uucico runs , it will expect to receive commands from another uucp program on the caller 's machine and begin a session the caller 's uucp responds with \20shostname options\0 , where options is a string containing zero or more unix-like option switches these can include packet and window sizes , the maximum supported file size , debugging options , and others for instance , when the caller responds with their system name , the called system may optionally hang up if it does not recognize the caller , sending the ryou are unknown to me\0 response string and then disconnecting if the two systems successfully handshake , the caller will now begin to send a series of file requests when the s command is received on the called system , it responds with sy if it succeeded and it is ready to accept the file , or snx if it failed , where x is a failure reason when the transfer is complete , the called system responds with cy if it successfully received the file , or cn5 if it failed this can be used to make that system call another and deliver files to it some systems will simply hang up on the successful reception of the h command and not bother with the final handshake within the suite of protocols in uucp , the underlying g-protocol is responsible for transferring information in an error-free form the protocol originated as a general-purpose system for packet delivery , and thus offers a number of features that are not used by the uucp package as a whole these include a secondary channel that can send command data interspersed with a file transfer , and the ability to renegotiate the packet and window sizes during transmission these extra features may not be available in some implementations of the uucp stack this is followed by a single byte , known as '' k '' , containing a value of 1 to 8 indicating a packet size from 32 to 4096 bytes , or a 9 indicating a control packet g-protocol uses a simple sliding window system to deal with potentially long latencies between endpoints they were widely used on uucp hosts as they could quickly pay for themselves in reduced long-distance charges uucp implementations also include other transfer protocols for use over certain links it does not packetize data , instead , the entire file is sent as a single long string followed by a whole-file checksum t-protocol originated in the bsd versions of uucp and is designed to run over 8-bit error-free tcp/ip links taylor uucp also incorporated features of all previous versions of uucp , allowing it to communicate with any other version and even use similar config file formats from other versions uux is remote command execution over uucp the uux command is used to execute a command on a remote system , or to execute a command on the local system using files from remote systems 