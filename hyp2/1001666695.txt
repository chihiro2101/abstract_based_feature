before the widespread availability of internet access , computers were only connected by smaller local area networks within a company or organization they were also often equipped with modems so they could be used remotely from character-mode terminals via dial-up telephone lines uucp used the computers ' modems to dial out to other computers , establishing temporary , point-to-point links between them each system in a uucp network has a list of neighbor systems , with phone numbers , login names and passwords , etc when work ( file transfer or command execution requests ) is queued for a neighbor system , the program typically calls that system to process the work over time , dial-up links were replaced by internet connections , and uucp added a number of new link layer protocols these newer connections also reduced the need for uucp at all , as newer application protocols developed to take advantage of the new networks today , uucp is rarely used over dial-up links , but is occasionally used over tcp/ip the number of systems involved , as of early 2006 , ran between 1500 and 2000 sites across 60 enterprises uucp 's longevity can be attributed to its low cost , extensive logging , native failover to dialup , and persistent queue management uucp is normally started by having a user log into the target system and then running the uucp program thus , for automated transfers , another machine simply has to open a modem connection to the called machine and log into the known account when uucico runs , it will expect to receive commands from another uucp program on the caller 's machine and begin a session if the two systems successfully handshake , the caller will now begin to send a series of file requests when the s command is received on the called system , it responds with sy if it succeeded and it is ready to accept the file , or snx if it failed , where x is a failure reason if an sy is received by the caller , it begins uploading the file using the protocol selected during the initial handshake ( see below ) : x uploads commands to be executed on the called system the called system responds with xy if it succeeded , or xn if it failed within the suite of protocols in uucp , the underlying g-protocol is responsible for transferring information in an error-free form these include a secondary channel that can send command data interspersed with a file transfer , and the ability to renegotiate the packet and window sizes during transmission this is followed by a single byte , known as '' k '' , containing a value of 1 to 8 indicating a packet size from 32 to 4096 bytes , or a 9 indicating a control packet in a control packet , xxx indicates the command and yyy is used for various parameters g-protocol uses a simple sliding window system to deal with potentially long latencies between endpoints the protocol allows packets to size from 64 to 4096 8-bit bytes , and windows that include 1 to 7 packets they were widely used on uucp hosts as they could quickly pay for themselves in reduced long-distance charges t-protocol originated in the bsd versions of uucp and is designed to run over 8-bit error-free tcp/ip links uucp was originally written at at & t bell laboratories by mike lesk taylor uucp also incorporated features of all previous versions of uucp , allowing it to communicate with any other version and even use similar config file formats from other versions the uux command is used to execute a command on a remote system , or to execute a command on the local system using files from remote systems one surviving feature of uucp is the chat file format , largely inherited by the expect software package in addition to legacy use , in 2021 new and innovative uucp uses are growing , especially for telecommunications in the hf band , for example , for communities in the amazon rainforest for email exchange and other uses taylor uucp documentation â€“ useful information about uucp in general and various uucp protocols 