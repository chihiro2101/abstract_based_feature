before the widespread availability of internet access , computers were only connected by smaller local area networks within a company or organization they were also often equipped with modems so they could be used remotely from character-mode terminals via dial-up telephone lines uucp used the computers ' modems to dial out to other computers , establishing temporary , point-to-point links between them each system in a uucp network has a list of neighbor systems , with phone numbers , login names and passwords , etc when work ( file transfer or command execution requests ) is queued for a neighbor system , the program typically calls that system to process the work over time , dial-up links were replaced by internet connections , and uucp added a number of new link layer protocols today , uucp is rarely used over dial-up links , but is occasionally used over tcp/ip uucp 's longevity can be attributed to its low cost , extensive logging , native failover to dialup , and persistent queue management uucp is normally started by having a user log into the target system and then running the uucp program thus , for automated transfers , another machine simply has to open a modem connection to the called machine and log into the known account when uucico runs , it will expect to receive commands from another uucp program on the caller 's machine and begin a session the caller 's uucp responds with \20shostname options\0 , where options is a string containing zero or more unix-like option switches these can include packet and window sizes , the maximum supported file size , debugging options , and others if the two systems successfully handshake , the caller will now begin to send a series of file requests there are four types : : s causes a file to be sent from the caller to the called system ( upload ) when the transfer is complete , the called system responds with cy if it successfully received the file , or cn5 if it failed : r is a request for the called system to send a file to the caller ( download ) : x uploads commands to be executed on the called system after sending an h command , the calling system sends a final packet ( control-p , six ohs , null-terminator ) and the called system responds with ( control-p , seven ohs , null-terminator ) some systems will simply hang up on the successful reception of the h command and not bother with the final handshake within the suite of protocols in uucp , the underlying g-protocol is responsible for transferring information in an error-free form the protocol originated as a general-purpose system for packet delivery , and thus offers a number of features that are not used by the uucp package as a whole these include a secondary channel that can send command data interspersed with a file transfer , and the ability to renegotiate the packet and window sizes during transmission many systems only supported k 2 , meaning 64 bytes in a data packet , xxx is the packet number for this packet from 0 to 7 , and yyy is the last that was received correctly in theory , a system using 4k packets and 7 packet windows ( 4096x7 ) would offer performance matching or beating the best file-transfer protocols like zmodem taylor uucp did not support g , but did support any valid requested window or packet size , so remote systems starting g would work fine with taylor 's g , while two taylor systems could negotiate even faster connections a simple uucp mail address was formed from the adjacent machine name , an exclamation mark ( often pronounced bang ) , followed by the user name on the adjacent machine uucpnet was the name for the totality of the network of computers connected through uucp a user at a system with uucp connections could thereby exchange mail with internet users , and the internet links could be used to bypass large portions of the slow uucp network this was at a time when true internet access required a leased line providing a connection to an internet point of presence , both of which were expensive and difficult to arrange the uux command is used to execute a command on a remote system , or to execute a command on the local system using files from remote systems 