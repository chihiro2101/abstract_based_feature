before the widespread availability of internet access , computers were only connected by smaller local area networks within a company or organization uucp used the computers ' modems to dial out to other computers , establishing temporary , point-to-point links between them each system in a uucp network has a list of neighbor systems , with phone numbers , login names and passwords , etc when work ( file transfer or command execution requests ) is queued for a neighbor system , the program typically calls that system to process the work over time , dial-up links were replaced by internet connections , and uucp added a number of new link layer protocols these newer connections also reduced the need for uucp at all , as newer application protocols developed to take advantage of the new networks today , uucp is rarely used over dial-up links , but is occasionally used over tcp/ip uucp is normally started by having a user log into the target system and then running the uucp program in most cases , this is automated by logging into a known user account used for transfers , whose account 's shell has been set to thus , for automated transfers , another machine simply has to open a modem connection to the called machine and log into the known account when uucico runs , it will expect to receive commands from another uucp program on the caller 's machine and begin a session the caller 's uucp responds with \20shostname options\0 , where options is a string containing zero or more unix-like option switches there are four types : : s causes a file to be sent from the caller to the called system ( upload ) when the s command is received on the called system , it responds with sy if it succeeded and it is ready to accept the file , or snx if it failed , where x is a failure reason the called system responds with hy if it succeeded , or hn if it failed some systems will simply hang up on the successful reception of the h command and not bother with the final handshake within the suite of protocols in uucp , the underlying g-protocol is responsible for transferring information in an error-free form these include a secondary channel that can send command data interspersed with a file transfer , and the ability to renegotiate the packet and window sizes during transmission the next byte is the data type and finally , the last byte is the xor of the header , allowing it to be checked separately from the payload in practice , many implementations only supported a single setting of 64x3 this triggered the software stack to send the next packet , so rapidly that the transfer became almost continuous they were widely used on uucp hosts as they could quickly pay for themselves in reduced long-distance charges uucp implementations also include other transfer protocols for use over certain links f-protocol is designed to run over 7-bit error-corrected links t-protocol originated in the bsd versions of uucp and is designed to run over 8-bit error-free tcp/ip links the less-used e-protocol , which originated the honeydanber versions as opposed to t from bsd , differs only in that commands are not packetized and are instead sent as normal strings , while files are padded to the nearest 20 bytes uucp was originally written at at & t bell laboratories by mike lesk by 1978 it was in use on 82 unix machines inside the bell system , primarily for software distribution the and capabilities could be used to send email between machines , with suitable mail user interfaces and delivery agent programs uux is remote command execution over uucp the remote system will then execute the requested command and return the result , when the original system is available taylor uucp documentation â€“ useful information about uucp in general and various uucp protocols 