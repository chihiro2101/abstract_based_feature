client-server applications use the tls protocol to communicate across a network in a way designed to prevent eavesdropping and tampering since applications can communicate either with or without tls ( or ssl ) , it is necessary for the client to indicate to the server the setup of a tls connection one of the main ways of achieving this is to use a different port number for tls connections , for example port 443 for https another mechanism is for the client to make a protocol-specific request to the server to switch the connection to tls ; for example , by making a starttls request when using the mail and news protocols once the client and server have agreed to use tls , they negotiate a stateful connection by using a handshaking procedure the protocols use a handshake with an asymmetric cipher to establish not only cipher settings but also a session-specific shared key with which further communication is encrypted using a symmetric cipher tls runs '' on top of some reliable transport protocol ( e.g however , applications generally use tls as if it were a transport layer , even though applications using tls must actively control initiating tls handshakes and handling of exchanged authentication certificates from the application protocol point of view , tls belongs to a lower layer , although the tcp/ip model is too coarse to show it in the name-based virtual server feature being provided by the application layer , all co-hosted virtual servers share the same certificate because the server has to select and send a certificate immediately after the clienthello message to provide the server name , transport layer security ( tls ) extensions allow clients to include a server name indication extension ( sni ) in the extended clienthello message the current standard replaces these former versions , which are now considered obsolete : : '' the tls protocol version 1.0 '' : '' the transport layer security ( tls ) protocol version 1.1 '' : '' addition of kerberos cipher suites to transport layer security ( tls ) '' : '' upgrading to tls within http/1.1 '' , explains how to use the http/1.1 upgrade header to initiate transport layer security ( tls ) over an existing tcp connection : '' using the secure remote password ( srp ) protocol for tls authentication '' : '' using openpgp keys for transport layer security ( tls ) authentication '' : '' tls fallback signaling cipher suite value ( scsv ) for preventing protocol downgrade attacks '' : '' summarizing known attacks on transport layer security ( tls ) and datagram tls ( dtls ) '' : '' recommendations for secure use of transport layer security ( tls ) and datagram transport layer security ( dtls ) '' 