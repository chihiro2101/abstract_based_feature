although shapes themselves ( particularly paths ) can be decomposed further into nodes such as spline nodes , it is practical to think of the scene graph as composed of shapes rather than going to a lower level of representation internally , there may be no real structural difference between layers and groups at all , since they are both just nodes of a scene graph a visibility member , for example , would be a feature of a layer , but not necessarily of a group in such applications , nodes in a scene graph ( generally ) represent entities or objects in the scene the scene graph would have a 'horse ' node with a 'knight ' node attached to it the scene graph may also describe the spatial , as well as the logical , relationship of the various entities : the knight moves through 3d space as the horse moves this means that only a single copy of the data is kept , which is then referenced by any 'knight ' nodes in the scene graph applying an operation on a scene graph requires some way of dispatching an operation based on a node 's type for example , in a render operation , a transformation group node would accumulate its transformation by matrix multiplication , vector displacement , quaternions or euler angles some implementations might render the object directly , which invokes the underlying rendering api , such as directx or opengl in object-oriented languages such as c++ , this can easily be achieved by virtual functions , where each represents an operation that can be performed on a node it demonstrates that a good scene graph implementation depends heavily on the application in which it is used at this point , many scene graph engines then traverse back up the tree , applying a similar operation for example , consider a render operation that takes transformations into account : while recursively traversing down the scene graph hierarchy , a pre-render operation is called some scene graph operations are actually more efficient when nodes are traversed in a different order – this is where some systems implement scene graph rebuilding to reorder the scene graph into an easier-to-parse format or tree for example , in 2d cases , scene graphs typically render themselves by starting at the tree 's root node and then recursively draw the child nodes a scene graph can easily be adapted to include/become a bvh – if each node has a volume associated or there is a purpose-built '' bound node '' added in at convenient location in the hierarchy an effective way of combining space partitioning and scene graphs is by creating a scene leaf node that contains the spatial partitioning data depending on the particulars of the application 's drawing performance , a large part of the scene graph 's design can be impacted by rendering efficiency considerations graph ( data structure ) graph theory space partitioning tree ( data structure ) 