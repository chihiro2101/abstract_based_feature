students must request a room from the front desk if they wish to use a study room when a student has finished using a room , the student must return to the desk and indicate that one room has become free the room can be used for as long as desired , and so it is not possible to book rooms ahead of time in this scenario the front desk count-holder represents a counting semaphore , the rooms are the resource , and the students represent processes/threads the value of the semaphore in this scenario is initially 10 , with all rooms empty when a student requests a room , they are granted access , and the value of the semaphore is changed to 9 if someone requests a room and the current value of the semaphore is 0 , the little book of semaphores allen b when used to control access to a pool of resources , a semaphore tracks only how many resources are free ; it does not keep track of which of the resources are free some other mechanism ( possibly involving more semaphores ) may be required to select a particular free resource the value of the semaphore s is the number of units of the resource that are currently available the p operation wastes time or sleeps until a resource protected by the semaphore becomes available , at which time the resource is immediately claimed the v operation is the inverse : it makes a resource available again after the process has finished using it : increments the value of semaphore variable by 1 many operating systems provide efficient semaphore primitives that unblock a waiting process when the semaphore is incremented to avoid starvation , a semaphore has an associated queue of processes ( usually with fifo semantics ) if a process performs a p operation on a semaphore that has the value zero , the process is added to the semaphore 's queue and its execution is suspended when another process increments the semaphore by performing a v operation , and there are processes on the queue , one of them is removed from the queue and resumes execution to solve this problem in a multiprocessor system a locking variable can be used to control access to the semaphore the semaphore solution to the producerâ€“consumer problem tracks the state of the queue with two semaphores : emptycount , the number of empty places in the queue , and fullcount , the number of elements in the queue once the first producer exits its critical section , fullcount is incremented , allowing one consumer to enter its critical section 