suppose a library has 10 identical study rooms , to be used by one student at a time when a student has finished using a room , the student must return to the desk and indicate that one room has become free the value of the semaphore in this scenario is initially 10 , with all rooms empty when a student requests a room , they are granted access , and the value of the semaphore is changed to 9 if someone requests a room and the current value of the semaphore is 0 , the little book of semaphores allen b when used to control access to a pool of resources , a semaphore tracks only how many resources are free ; it does not keep track of which of the resources are free the value of the semaphore s is the number of units of the resource that are currently available the p operation wastes time or sleeps until a resource protected by the semaphore becomes available , at which time the resource is immediately claimed one important property of semaphore s is that its value can not be changed except by using the v and p operations a simple way to understand ( p ) and ( v ) operations is : : decrements the value of semaphore variable by 1 if the new value of the semaphore variable is negative , the process executing is blocked ( i.e : increments the value of semaphore variable by 1 after the increment , if the pre-increment value was negative ( meaning there are processes waiting for a resource ) , it transfers a blocked process from the semaphore 's waiting queue to the ready queue many operating systems provide efficient semaphore primitives that unblock a waiting process when the semaphore is incremented this means that processes do not waste time checking the semaphore value unnecessarily if a process performs a p operation on a semaphore that has the value zero , the process is added to the semaphore 's queue and its execution is suspended when another process increments the semaphore by performing a v operation , and there are processes on the queue , one of them is removed from the queue and resumes execution to solve this problem in a multiprocessor system a locking variable can be used to control access to the semaphore the semaphore solution to the producerâ€“consumer problem tracks the state of the queue with two semaphores : emptycount , the number of empty places in the queue , and fullcount , the number of elements in the queue the producers , one at a time , gain access to the queue through usequeue and deposit items in the queue 