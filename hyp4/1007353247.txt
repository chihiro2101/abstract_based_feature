these systems may or may not allow other applications to access the data directly , and those that did use a wide variety of methodologies since the sql language had only rudimentary programming features , users often wanted to use sql within a program written in another language , say fortran or c this led to the concept of embedded sql , which allowed sql code to be embedded within another language for instance , a sql statement like select from city could be inserted as text within c source code , and during compiler it would be converted into a custom format that directly called a function within a library that would pass the statement into the sql system like the different varieties of sql , the embedded sqls that used them varied widely , not only from platform to platform , but even across languages on one platform – a system that allowed calls into ibm 's db2 would look very different from one that called into their own sql/ds another key problem to the embedded sql concept was that the sql code could only be changed in the program 's source code , so that even small changes to the query required considerable programmer effort to modify the sql market referred to this as static sql , versus dynamic sql which could be changed at any time , like the command-line interfaces that shipped with almost all sql systems , or a programming interface that left the sql as plain text until it was called dynamic sql systems became a major focus for sql vendors during the 1980s older mainframe databases , and the newer microcomputer based systems that were based on them , generally did not have a sql-like command processor between the user and the database engine instead , the data was accessed directly by the program – a programming library in the case of large mainframe systems , or a command line interface or interactive forms system in the case of dbase and similar applications for this model to work , a data access standard was a requirement – in the mainframe field it was highly likely that all of the computers in a shop were from one vendor and clients were computer terminals talking directly to them , but in the micro field there was no such standardization and any client might access any server using any networking system blueprint , developed for 1-2-3 , supported a variety of data sources , including sql/ds , db2 , focus and a variety of similar mainframe systems , as well as microcomputer systems like dbase and the early microsoft/ashton-tate efforts that would eventually develop into microsoft sql server 1 , 69 unlike the later odbc , blueprint was a purely code-based system , lacking anything approximating a command language like sql db-library was aided by an industry-wide move from library systems that were tightly linked to a specific language , to library systems that were provided by the operating system and required the languages on that platform to conform to its standards in spite of blueprint 's great lead – it was running when msda was still a paper project – lotus eventually joined the msda efforts as it became clear that sql would become the de facto database standard at the first meeting there was considerable debate over whether or not the effort should work solely on the sql language itself , or attempt a wider standardization which included a dynamic sql language-embedding system as well , what they called a call level interface ( cli ) a proposed standard was released in december 1991 , and industry input was gathered and worked into the system through 1992 , resulting in yet another name change to odbc however , jet did not use sql ; like datalens , the interface was in c and consisted of data structures and function calls simba was used as a parser above jet 's c library , turning jet into an sql database some of this was unavoidable due to the path that the calls took through the jet-based stack ; odbc calls to sql databases were first converted from simba technologies 's sql dialect to jet 's internal c-based format , then passed to a driver for conversion back into sql calls for the database visigenic ported odbc to a wide variety of unix platforms , where odbc quickly became the de facto standard sun microsystems used the odbc system as the basis for their own open standard , java database connectivity ( jdbc ) jdbc-to-odbc bridges allow java-based programs to access data sources through odbc drivers on platforms lacking a native jdbc driver , although these are now relatively rare inversely , odbc-to-jdbc bridges allow c-based programs to access data sources through jdbc drivers on platforms or from databases lacking suitable odbc drivers but when odbc is no longer a strong requirement for client-server programming , now is odbc more important for data access and data virtualization of data integration in data analytic and data science scenarios version history : 1.0 : released in september 1992 2.0 : 1994 2.5 3.0 : 1995 , john goodson of intersolv and frank pellow and paul cotton of ibm provided significant input to odbc 3.0 microsoft corporation because different technologies have different capabilities , most odbc drivers do not implement all functionality defined in the odbc standard the dsn stores this information in a standardized format , and the dm provides this to the driver during connection requests microsoft , '' data access technologies road map '' , deprecated mdac components , microsoft '' ado programmer 's guide '' appendix a : providers , microsoft ole db provider for odbc , retrieved july 30 , 2005 programmers usually use such a bridge when a given database lacks an ado.net provider , but is accessible through an odbc driver microsoft odbc overview os400 and i5os odbc administration presentation slides from www.roth.net microsoft odbc & data access apis history article . 