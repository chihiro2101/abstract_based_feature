these systems may or may not allow other applications to access the data directly , and those that did use a wide variety of methodologies since the sql language had only rudimentary programming features , users often wanted to use sql within a program written in another language , say fortran or c this led to the concept of embedded sql , which allowed sql code to be embedded within another language for instance , a sql statement like select from city could be inserted as text within c source code , and during compiler it would be converted into a custom format that directly called a function within a library that would pass the statement into the sql system results returned from the statements would be interpreted back into c data formats like char using similar library code like the different varieties of sql , the embedded sqls that used them varied widely , not only from platform to platform , but even across languages on one platform – a system that allowed calls into ibm 's db2 would look very different from one that called into their own sql/ds the sql market referred to this as static sql , versus dynamic sql which could be changed at any time , like the command-line interfaces that shipped with almost all sql systems , or a programming interface that left the sql as plain text until it was called older mainframe databases , and the newer microcomputer based systems that were based on them , generally did not have a sql-like command processor between the user and the database engine instead , the data was accessed directly by the program – a programming library in the case of large mainframe systems , or a command line interface or interactive forms system in the case of dbase and similar applications those programs may be given a way to access this data , often through libraries , but it would not work with any other database engine , or even different databases in the same engine one of the early examples of such a system was lotus development 's datalens , initially known as blueprint blueprint , developed for 1-2-3 , supported a variety of data sources , including sql/ds , db2 , focus and a variety of similar mainframe systems , as well as microcomputer systems like dbase and the early microsoft/ashton-tate efforts that would eventually develop into microsoft sql server 1 , 69 unlike the later odbc , blueprint was a purely code-based system , lacking anything approximating a command language like sql instead , programmers used data structures to store the query information , constructing a query by linking many of these structures together much of the system was based on sybase 's db-library system , with the sybase-specific sections removed and several additions to support other platforms the first draft of the microsoft data access api was published in april 1989 , about the same time as lotus ' announcement of blueprint in 1988 several vendors , mostly from the unix and database communities , formed the sql access group ( sag ) in an effort to produce a single basic standard for the sql language it was also during this period that the name call level interface was formally adopted the commands in the api were split into groups ; the core group was identical to the cli , the level 1 extensions were commands that would be easy to implement in drivers , while level 2 commands contained the more advanced features like cursors jet allowed using one set of calls to access common microcomputer databases in a fashion similar to blueprint , by then renamed datalens however , jet did not use sql ; like datalens , the interface was in c and consisted of data structures and function calls this would not only make windows a premier platform for cli development , but also allow users to use sql to access both jet and other databases as well what was missing was the sql parser that could convert those calls from their text form into the c-interface used in jet simba was used as a parser above jet 's c library , turning jet into an sql database some of this was unavoidable due to the path that the calls took through the jet-based stack ; odbc calls to sql databases were first converted from simba technologies 's sql dialect to jet 's internal c-based format , then passed to a driver for conversion back into sql calls for the database digital equipment and oracle both contracted simba technologies to develop drivers for their databases as well but when odbc is no longer a strong requirement for client-server programming , now is odbc more important for data access and data virtualization of data integration in data analytic and data science scenarios finally , another set of commands , mostly used internally , is used to convert data from the dbms 's internal formats to a set of standardized odbc formats , which are based on the c language formats programmers usually use such a bridge when they lack an odbc driver for some database but have access to a jdbc driver programmers usually use such a bridge when a given database lacks an ole db provider , but is accessible through an odbc driver microsoft odbc overview os400 and i5os odbc administration presentation slides from www.roth.net microsoft odbc & data access apis history article . 