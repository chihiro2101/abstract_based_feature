since the sql language had only rudimentary programming features , users often wanted to use sql within a program written in another language , say fortran or c the sql market referred to this as static sql , versus dynamic sql which could be changed at any time , like the command-line interfaces that shipped with almost all sql systems , or a programming interface that left the sql as plain text until it was called dynamic sql systems became a major focus for sql vendors during the 1980s older mainframe databases , and the newer microcomputer based systems that were based on them , generally did not have a sql-like command processor between the user and the database engine instead , the data was accessed directly by the program – a programming library in the case of large mainframe systems , or a command line interface or interactive forms system in the case of dbase and similar applications those programs may be given a way to access this data , often through libraries , but it would not work with any other database engine , or even different databases in the same engine some of these were mainframe related , designed to allow programs running on those machines to translate between the variety of sql 's and provide a single common interface which could then be called by other mainframe or microcomputer programs these solutions included ibm 's distributed relational database architecture ( drda ) and apple computer 's data access language blueprint , developed for 1-2-3 , supported a variety of data sources , including sql/ds , db2 , focus and a variety of similar mainframe systems , as well as microcomputer systems like dbase and the early microsoft/ashton-tate efforts that would eventually develop into microsoft sql server mcglinn , evan ( 1988 ) , blueprint lets 1-2-3 access outside data '' , infoworld , vol 1 , 69 unlike the later odbc , blueprint was a purely code-based system , lacking anything approximating a command language like sql around the same time , an industry team including members from sybase ( tom haggin ) , tandem computers ( jim gray & rao yendluri ) and microsoft ( kyle g ) were working on a standardized dynamic sql concept the first draft of the microsoft data access api was published in april 1989 , about the same time as lotus ' announcement of blueprint in spite of blueprint 's great lead – it was running when msda was still a paper project – lotus eventually joined the msda efforts as it became clear that sql would become the de facto database standard in 1988 several vendors , mostly from the unix and database communities , formed the sql access group ( sag ) in an effort to produce a single basic standard for the sql language it was also during this period that the name call level interface was formally adopted jet allowed using one set of calls to access common microcomputer databases in a fashion similar to blueprint , by then renamed datalens however , jet did not use sql ; like datalens , the interface was in c and consisted of data structures and function calls this would not only make windows a premier platform for cli development , but also allow users to use sql to access both jet and other databases as well microsoft included drivers for excel to turn its spreadsheet documents into sql-accessible database tables some of this was unavoidable due to the path that the calls took through the jet-based stack ; odbc calls to sql databases were first converted from simba technologies 's sql dialect to jet 's internal c-based format , then passed to a driver for conversion back into sql calls for the database visigenic ported odbc to a wide variety of unix platforms , where odbc quickly became the de facto standard '' similarities and differences between odbc and cli '' , infosphere classic documentation , ibm , 26 september 2008 over time , database vendors took over the driver interfaces and provided direct links to their products as microsoft turned its attention away from working directly on odbc , the unix field was increasingly embracing it jdbc-to-odbc bridges allow java-based programs to access data sources through odbc drivers on platforms lacking a native jdbc driver , although these are now relatively rare inversely , odbc-to-jdbc bridges allow c-based programs to access data sources through jdbc drivers on platforms or from databases lacking suitable odbc drivers an odbc driver enables an odbc-compliant application to use a data source , normally a dbms an odbc-jdbc bridge consists of an odbc driver which uses the services of a jdbc driver to connect to a database a jdbc-odbc bridge consists of a jdbc driver which employs an odbc driver to connect to a target database an ado.net-odbc bridge consists of an ado.net provider which uses the services of an odbc driver to connect to a target database microsoft odbc overview os400 and i5os odbc administration presentation slides from www.roth.net microsoft odbc & data access apis history article . 