in the context of program correctness , static analysis can discover vulnerabilities during the development phase of the program these vulnerabilities are easier to correct than the ones found during the testing phase since static analysis leads to the root of the vulnerability in this case , the developer using the tool would have to stop the tool and avoid running the tool on that piece of code again ( or possibly modify the code to avoid tripping up the tool ) an optimizing compiler is at liberty to generate code that does anything at runtime even crashes if it encounters source code whose semantics are unspecified by the language standard in use the purpose of control-flow analysis is to obtain information about which functions can be called at various points during the execution of a program type checking – verify whether the program is accepted by the type system the tests are performed by executing the program with an input and evaluating its behavior and the produced output even if no security requirements are specified , additional security testing should be performed to ensure that an attacker can ’ t tamper with the software and steal information , disrupt the software ’ s normal operations , or use it as a pivot to attack its users for a given subset of a program ’ s behavior , program slicing consists of reducing the program to the minimum form that still produces the selected behavior 