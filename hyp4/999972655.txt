in the context of program correctness , static analysis can discover vulnerabilities during the development phase of the program these vulnerabilities are easier to correct than the ones found during the testing phase since static analysis leads to the root of the vulnerability in this case , the developer using the tool would have to stop the tool and avoid running the tool on that piece of code again ( or possibly modify the code to avoid tripping up the tool ) the purpose of control-flow analysis is to obtain information about which functions can be called at various points during the execution of a program data-flow analysis is a technique designed to gather information about the values at each point of the program and how they change over time one of the most known examples of data-flow analysis is taint checking which consists of considering all variables which contain user supplied data which is considered '' tainted '' , i.e abstract interpretation allows the extraction of information about a possible execution of a program without actually executing the program dynamic analysis can use runtime knowledge of the program to increase the precision of the analysis , while also providing runtime protection , but it can only analyze a single execution of the problem and might degrade the program ’ s performance due to the runtime checks for a given subset of a program ’ s behavior , program slicing consists of reducing the program to the minimum form that still produces the selected behavior 