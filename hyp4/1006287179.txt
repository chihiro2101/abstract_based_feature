the basic building blocks of clos are methods , classes , instances of those classes , and generic functions classes can have multiple superclasses , a list of slots ( member variables in c++/java parlance ) and a special metaclass each slot has a name and the value of a slot can be accessed by that name using the function slot-value each slot in a clos class must have a unique name clos is a multiple dispatch system most oo languages are single-dispatch , meaning that methods are only specialized on the first argument ) , clos dispatch works also with these non-clos classes clos also supports dispatch over individual objects ( eql specializers ) however , most common lisp implementations provide a metaobject protocol which allows generic functions to provide application specific specialization and dispatch rules dispatch in clos is also different from most oo languages : given a list of arguments , a list of applicable methods is determined selected methods from this list are then combined into an effective method using the method combination used by the generic function the standard method-combination provides the primary , before , after and around methods explained above outside of the ansi common lisp standard , there is a widely implemented extension to clos called the metaobject protocol ( mop ) flavors ( and its successor new flavors ) was the object system on the mit lisp machine commonloops was implemented for common lisp the common lisp object system : an overview by richard p fundamentals of clos by nick levine provides a step-by-step exposure to the implementation of oo concepts in clos , and how to utilize them 