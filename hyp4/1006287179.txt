the basic building blocks of clos are methods , classes , instances of those classes , and generic functions each slot in a clos class must have a unique name clos is a multiple dispatch system another unusual feature is that methods do not '' belong '' to classes ; classes do not provide a namespace for generic functions or methods methods in clos are grouped into generic functions a generic function is an object which is callable like a function and which associates a collection of methods with a shared name and argument structure , each specialized for different arguments ) , clos dispatch works also with these non-clos classes dispatch in clos is also different from most oo languages : given a list of arguments , a list of applicable methods is determined selected methods from this list are then combined into an effective method using the method combination used by the generic function adding or removing methods thus may lead to changed effective methods ( even when the generic function is called with the same arguments ) at runtime changing the method combination also may lead to different effective methods apart from normal ( '' primary '' ) methods , there also are : before , : after , and : around '' auxiliary '' methods clos also allows one to add , redefine and remove methods at runtime clos is not a prototype language : classes must be defined before objects can be instantiated as members of that class a portable implementation called portable commonloops ( pcl ) was the first implementation of clos pcl is implemented mostly in portable common lisp with only a few system dependent parts miller , understanding clos : the common lisp object system , 1991 , digital press , andreas paepcke , object-oriented programming : the clos perspective , 1993 , the mit press 