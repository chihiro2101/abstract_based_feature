the basic building blocks of clos are methods , classes , instances of those classes , and generic functions classes can have multiple superclasses , a list of slots ( member variables in c++/java parlance ) and a special metaclass methods in clos are grouped into generic functions a generic function is an object which is callable like a function and which associates a collection of methods with a shared name and argument structure , each specialized for different arguments ) , clos dispatch works also with these non-clos classes clos does not by default support dispatch over all common lisp data types ( for example dispatch does not work for fully specialized array types or for types introduced by deftype ) however , most common lisp implementations provide a metaobject protocol which allows generic functions to provide application specific specialization and dispatch rules dispatch in clos is also different from most oo languages : given a list of arguments , a list of applicable methods is determined selected methods from this list are then combined into an effective method using the method combination used by the generic function adding or removing methods thus may lead to changed effective methods ( even when the generic function is called with the same arguments ) at runtime changing the method combination also may lead to different effective methods clos also allows one to add , redefine and remove methods at runtime outside of the ansi common lisp standard , there is a widely implemented extension to clos called the metaobject protocol ( mop ) flavors ( and its successor new flavors ) was the object system on the mit lisp machine large parts of the lisp machine operating systems and many applications for it use flavors or new flavors sonya keene , object-oriented programming in common lisp : a programmer 's guide to clos , 1988 , addison-wesley the common lisp object system : an overview by richard p 