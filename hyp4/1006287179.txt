the basic building blocks of clos are methods , classes , instances of those classes , and generic functions each slot in a clos class must have a unique name clos is a multiple dispatch system another unusual feature is that methods do not '' belong '' to classes ; classes do not provide a namespace for generic functions or methods methods in clos are grouped into generic functions since common lisp provides non-clos classes for structures and built-in data types ( numbers , strings , characters , symbols , ) , clos dispatch works also with these non-clos classes clos does not by default support dispatch over all common lisp data types ( for example dispatch does not work for fully specialized array types or for types introduced by deftype ) dispatch in clos is also different from most oo languages : given a list of arguments , a list of applicable methods is determined selected methods from this list are then combined into an effective method using the method combination used by the generic function any slot can be accessed using the slot-value function or via ( optionally auto-generated ) accessor methods outside of the ansi common lisp standard , there is a widely implemented extension to clos called the metaobject protocol ( mop ) flavors ( and its successor new flavors ) was the object system on the mit lisp machine flavors is mostly obsolete , though implementations for common lisp do exist pcl is widely ported and still provides the base for the clos implementation of several common lisp implementations pcl is implemented mostly in portable common lisp with only a few system dependent parts the common lisp object system : an overview by richard p 