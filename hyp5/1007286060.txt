semi-formal methods are formalisms and languages that are not considered fully “ formal ” this has been dubbed formal methods lite level 1 : formal development and formal verification may be used to produce a program in a more formal manner for example , proofs of properties or refinement from the specification to a program may be undertaken this can be very expensive and is only practically worthwhile if the cost of mistakes is extremely high ( e.g as with programming language semantics , styles of formal methods may be roughly classified as follows : denotational semantics , in which the meaning of a system is expressed in the mathematical theory of domains proponents of such methods point to the simplicity of their models as a means to expressive clarity ; critics counter that the problem of semantics has just been delayed ( who defines the semantics of the simpler model ? ) axiomatic semantics , in which the meaning of the system is expressed in terms of preconditions and postconditions which are true before and after the system performs a task , respectively proponents note the connection to classical logic ; critics note that such semantics never really describe what a system does ( merely what is true before and afterwards ) some practitioners believe that the formal methods community has overemphasized full formalization of a specification or design as an alternative , various lightweight formal methods , which emphasize partial specification and focused application , have been proposed larsen , '' a lightweight approach to formal methods '' , in proceedings of the international workshop on current trends in applied formal methods , boppard , germany , springer-verlag , october 1998 once a formal specification has been produced , the specification may be used as a guide while the concrete system is developed during the design process ( i.e for example : if the formal specification is in operational semantics , the observed behavior of the concrete system can be compared with the behavior of the specification ( which itself should be executable or simulatable ) if the formal specification is in axiomatic semantics , the preconditions and postconditions of the specification may become assertions in the executable code formal verification is the use of software tools to prove properties of a formal specification , or to prove that a formal model of a system implementation satisfies its specification sign-off verification is the use of a formal verification tool that is highly trusted model checking , in which a system verifies certain properties by means of an exhaustive search of all possible states that a system could enter during its execution there are several examples in which they have been used to verify the functionality of the hardware and software used in dcs intel uses such methods to verify its hardware and firmware ( permanent software programmed into a read-only memory ) formal verification has been frequently used in hardware by most of the well-known hardware vendors , such as ibm , intel , and amd intel core i7 processor execution engine validation formal verification in intel® core™ i7 processor execution engine validation , accessed at sep formal methods are most likely to be applied to safety-critical or security-critical software and systems , such as avionics software abstract interpretation automated theorem proving design by contract formal methods people formal specification formal verification formal system model checking software engineering specification language formal methods for safe and secure computer systems 