semi-formal methods are formalisms and languages that are not considered fully “ formal ” formal methods can be used at a number of levels : level 0 : formal specification may be undertaken and then a program developed from this informally level 1 : formal development and formal verification may be used to produce a program in a more formal manner for example , proofs of properties or refinement from the specification to a program may be undertaken level 2 : theorem provers may be used to undertake fully formal machine-checked proofs as with programming language semantics , styles of formal methods may be roughly classified as follows : denotational semantics , in which the meaning of a system is expressed in the mathematical theory of domains proponents of such methods point to the simplicity of their models as a means to expressive clarity ; critics counter that the problem of semantics has just been delayed ( who defines the semantics of the simpler model ? ) proponents note the connection to classical logic ; critics note that such semantics never really describe what a system does ( merely what is true before and afterwards ) some practitioners believe that the formal methods community has overemphasized full formalization of a specification or design 256-290 denney 's synthesis of some aspects of the z notation with use case driven development , richard denney , succeeding with use cases : working smart to deliver quality , addison-wesley professional publishing , 2005 , larsen , '' a lightweight approach to formal methods '' , in proceedings of the international workshop on current trends in applied formal methods , boppard , germany , springer-verlag , october 1998 formal methods can be applied at various points through the development process formal methods may be used to give a description of the system to be developed , at whatever level ( s ) of detail desired formal development is the use of formal methods as an integrated part of a tool-supported system development process once a formal specification has been produced , the specification may be used as a guide while the concrete system is developed during the design process ( i.e , realized typically in software , but also potentially in hardware ) formal verification is the use of software tools to prove properties of a formal specification , or to prove that a formal model of a system implementation satisfies its specification once a formal specification has been developed , the specification may be used as the basis for proving properties of the specification ( and hopefully by inference the developed system ) sign-off verification is the use of a formal verification tool that is highly trusted in contrast , there is increasing interest in producing proofs of correctness of such systems by automated means there are many areas of hardware , where intel have used fms to verify the working of the products , such as parameterized verification of cache-coherent protocol , c similarly , ibm has used formal methods in the verification of power gates , c brock , “ functional verification of the ibm power7 microprocessor and power7 multiprocessor systems ” , ibm journal of research and development , vol for sequential software , examples of formal methods include the b-method , the specification languages used in automated theorem proving , raise , and the z notation abstract interpretation automated theorem proving design by contract formal methods people formal specification formal verification formal system model checking software engineering specification language 