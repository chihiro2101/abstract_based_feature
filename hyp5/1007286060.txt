semi-formal methods are formalisms and languages that are not considered fully “ formal ” it defers the task of completing the semantics to a later stage , which is then done either by human interpretation or by interpretation through software like code or test case generators formal methods can be used at a number of levels : level 0 : formal specification may be undertaken and then a program developed from this informally this has been dubbed formal methods lite level 1 : formal development and formal verification may be used to produce a program in a more formal manner level 2 : theorem provers may be used to undertake fully formal machine-checked proofs as with programming language semantics , styles of formal methods may be roughly classified as follows : denotational semantics , in which the meaning of a system is expressed in the mathematical theory of domains proponents of such methods rely on the well-understood nature of domains to give meaning to the system ; critics point out that not every system may be intuitively or naturally viewed as a function proponents of such methods point to the simplicity of their models as a means to expressive clarity ; critics counter that the problem of semantics has just been delayed ( who defines the semantics of the simpler model ? ) axiomatic semantics , in which the meaning of the system is expressed in terms of preconditions and postconditions which are true before and after the system performs a task , respectively larsen , '' a lightweight approach to formal methods '' , in proceedings of the international workshop on current trends in applied formal methods , boppard , germany , springer-verlag , october 1998 formal methods can be applied at various points through the development process formal methods may be used to give a description of the system to be developed , at whatever level ( s ) of detail desired the need for formal specification systems has been noted for years formal development is the use of formal methods as an integrated part of a tool-supported system development process additionally , the operational commands of the specification may be amenable to direct translation into executable code if the formal specification is in axiomatic semantics , the preconditions and postconditions of the specification may become assertions in the executable code formal verification is the use of software tools to prove properties of a formal specification , or to prove that a formal model of a system implementation satisfies its specification once a formal specification has been developed , the specification may be used as the basis for proving properties of the specification ( and hopefully by inference the developed system ) sign-off verification is the use of a formal verification tool that is highly trusted dansk datamatik center used formal methods in the 1980s to develop a compiler system for the ada programming language that went on to become a long-lived commercial product there are several other projects of nasa in which formal methods are applied , such as next generation air transportation system , unmanned aircraft system integration in national airspace system , gheorghe , a similarly , ibm has used formal methods in the verification of power gates , c abstract interpretation automated theorem proving design by contract formal methods people formal specification formal verification formal system model checking software engineering specification language formal methods for safe and secure computer systems 