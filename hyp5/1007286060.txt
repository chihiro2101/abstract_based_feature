semi-formal methods are formalisms and languages that are not considered fully “ formal ” formal methods can be used at a number of levels : level 0 : formal specification may be undertaken and then a program developed from this informally this has been dubbed formal methods lite level 1 : formal development and formal verification may be used to produce a program in a more formal manner level 2 : theorem provers may be used to undertake fully formal machine-checked proofs as with programming language semantics , styles of formal methods may be roughly classified as follows : denotational semantics , in which the meaning of a system is expressed in the mathematical theory of domains proponents of such methods point to the simplicity of their models as a means to expressive clarity ; critics counter that the problem of semantics has just been delayed ( who defines the semantics of the simpler model ? ) proponents note the connection to classical logic ; critics note that such semantics never really describe what a system does ( merely what is true before and afterwards ) some practitioners believe that the formal methods community has overemphasized full formalization of a specification or design as an alternative , various lightweight formal methods , which emphasize partial specification and focused application , have been proposed 256-290 denney 's synthesis of some aspects of the z notation with use case driven development , richard denney , succeeding with use cases : working smart to deliver quality , addison-wesley professional publishing , 2005 , formal methods may be used to give a description of the system to be developed , at whatever level ( s ) of detail desired the need for formal specification systems has been noted for years in the algol 58 report , john backus presented a formal notation for describing programming language syntax , later named backus normal form then renamed backus–naur form ( bnf ) formal development is the use of formal methods as an integrated part of a tool-supported system development process once a formal specification has been produced , the specification may be used as a guide while the concrete system is developed during the design process ( i.e for example : if the formal specification is in operational semantics , the observed behavior of the concrete system can be compared with the behavior of the specification ( which itself should be executable or simulatable ) if the formal specification is in axiomatic semantics , the preconditions and postconditions of the specification may become assertions in the executable code formal verification is the use of software tools to prove properties of a formal specification , or to prove that a formal model of a system implementation satisfies its specification once a formal specification has been developed , the specification may be used as the basis for proving properties of the specification ( and hopefully by inference the developed system ) abstract interpretation , in which a system verifies an over-approximation of a behavioural property of the program , using a fixpoint computation over a ( possibly complete ) lattice representing it formal methods are applied in different areas of hardware and software , including routers , ethernet switches , routing protocols , security applications , and operating system microkernels such as sel4 dansk datamatik center used formal methods in the 1980s to develop a compiler system for the ada programming language that went on to become a long-lived commercial product in software development , formal methods are mathematical approaches to solving software ( and hardware ) problems at the requirements , specification , and design levels abstract interpretation automated theorem proving design by contract formal methods people formal specification formal verification formal system model checking software engineering specification language 