semi-formal methods are formalisms and languages that are not considered fully “ formal ” formal methods can be used at a number of levels : level 0 : formal specification may be undertaken and then a program developed from this informally level 1 : formal development and formal verification may be used to produce a program in a more formal manner for example , proofs of properties or refinement from the specification to a program may be undertaken level 2 : theorem provers may be used to undertake fully formal machine-checked proofs as with programming language semantics , styles of formal methods may be roughly classified as follows : denotational semantics , in which the meaning of a system is expressed in the mathematical theory of domains proponents of such methods rely on the well-understood nature of domains to give meaning to the system ; critics point out that not every system may be intuitively or naturally viewed as a function proponents of such methods point to the simplicity of their models as a means to expressive clarity ; critics counter that the problem of semantics has just been delayed ( who defines the semantics of the simpler model ? ) proponents note the connection to classical logic ; critics note that such semantics never really describe what a system does ( merely what is true before and afterwards ) as an alternative , various lightweight formal methods , which emphasize partial specification and focused application , have been proposed larsen , '' a lightweight approach to formal methods '' , in proceedings of the international workshop on current trends in applied formal methods , boppard , germany , springer-verlag , october 1998 formal methods can be applied at various points through the development process formal methods may be used to give a description of the system to be developed , at whatever level ( s ) of detail desired '' therefore the formal treatment of the semantics of legal programs will be included in a subsequent paper formal development is the use of formal methods as an integrated part of a tool-supported system development process once a formal specification has been produced , the specification may be used as a guide while the concrete system is developed during the design process ( i.e formal verification is the use of software tools to prove properties of a formal specification , or to prove that a formal model of a system implementation satisfies its specification once a formal specification has been developed , the specification may be used as the basis for proving properties of the specification ( and hopefully by inference the developed system ) consequently , some proofs of correctness are produced in the style of mathematical proof : handwritten ( or typeset ) using natural language , using a level of informality common to such proofs formal methods are applied in different areas of hardware and software , including routers , ethernet switches , routing protocols , security applications , and operating system microkernels such as sel4 there are several examples in which they have been used to verify the functionality of the hardware and software used in dcs dansk datamatik center used formal methods in the 1980s to develop a compiler system for the ada programming language that went on to become a long-lived commercial product in software development , formal methods are mathematical approaches to solving software ( and hardware ) problems at the requirements , specification , and design levels for sequential software , examples of formal methods include the b-method , the specification languages used in automated theorem proving , raise , and the z notation abstract interpretation automated theorem proving design by contract formal methods people formal specification formal verification formal system model checking software engineering specification language 