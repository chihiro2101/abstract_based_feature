in a shared memory multiprocessor system with a separate cache memory for each processor , it is possible to have many copies of shared data : one copy in the main memory and one in the local cache of each processor that requested it when one of the copies of data is changed , the other copies must reflect that change cache coherence is the discipline which ensures that the changes in the values of shared operands ( data ) are propagated throughout the system in a timely fashion the following are the requirements for cache coherence : ; write propagation : changes to the data in any cache must be propagated to other copies ( of that cache line ) in the peer caches ; transaction serialization : reads/writes to a single memory location must be seen by all processors in the same order one type of data occurring simultaneously in different cache memory is called cache coherence , or in some systems , global memory in a multiprocessor system , consider that more than one processor has cached a copy of the memory location x processor p1 changes the value of s ( in its cached copy ) to 10 following which processor p2 changes the value of s in its own cached copy to 20 the processors p3 and p4 now have an incoherent view of the memory another definition is : '' a multiprocessor is cache consistent if all writes to the same memory location are performed in some sequential order '' multiple copies of same data can exist in different cache simultaneously and if processors are allowed to update their own copies freely , an inconsistent view of memory can result : in a directory-based system , the data being shared is placed in a common directory that maintains the coherence between caches consistency model directory-based coherence memory barrier non-uniform memory access ( numa ) false sharing 