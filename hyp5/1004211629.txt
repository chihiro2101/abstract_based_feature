in a shared memory multiprocessor system with a separate cache memory for each processor , it is possible to have many copies of shared data : one copy in the main memory and one in the local cache of each processor that requested it when one of the copies of data is changed , the other copies must reflect that change the following are the requirements for cache coherence : ; write propagation : changes to the data in any cache must be propagated to other copies ( of that cache line ) in the peer caches ; transaction serialization : reads/writes to a single memory location must be seen by all processors in the same order one type of data occurring simultaneously in different cache memory is called cache coherence , or in some systems , global memory in a multiprocessor system , consider that more than one processor has cached a copy of the memory location x propagating the writes to the shared memory location ensures that all the caches have a coherent view of the memory the above conditions satisfy the write propagation criteria required for cache coherence processor p1 changes the value of s ( in its cached copy ) to 10 following which processor p2 changes the value of s in its own cached copy to 20 p4 on the other hand may see changes made by p1 and p2 in the order in which they are made and hence return 20 on a read to s the processors p3 and p4 now have an incoherent view of the memory the intention is that two clients must never see different values for the same shared data ; write-update : when a write operation is observed to a location that a cache has a copy of , the cache controller updates its own copy of the snooped memory location with the new data 