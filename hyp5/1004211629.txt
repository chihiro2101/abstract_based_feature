in a shared memory multiprocessor system with a separate cache memory for each processor , it is possible to have many copies of shared data : one copy in the main memory and one in the local cache of each processor that requested it cache coherence is the discipline which ensures that the changes in the values of shared operands ( data ) are propagated throughout the system in a timely fashion the following are the requirements for cache coherence : ; write propagation : changes to the data in any cache must be propagated to other copies ( of that cache line ) in the peer caches one type of data occurring simultaneously in different cache memory is called cache coherence , or in some systems , global memory in a multiprocessor system , consider that more than one processor has cached a copy of the memory location x the following conditions are necessary to achieve cache coherence : in a read made by a processor p to a location x that follows a write by the same processor p to x , with no writes to x by another processor occurring between the write and the read instructions made by p , x must always return the value written by p p4 on the other hand may see changes made by p1 and p2 in the order in which they are made and hence return 20 on a read to s therefore , in order to satisfy transaction serialization , and hence achieve cache coherence , the following condition along with the previous two mentioned in this section must be met : writes to the same location must be sequenced thus , the only difference between the cache coherent system and sequentially consistent system is in the number of address locations the definition talks about ( single memory location for a cache coherent system , and all memory locations for a sequentially consistent system ) another definition is : '' a multiprocessor is cache consistent if all writes to the same memory location are performed in some sequential order '' coherence protocols apply cache coherence in multiprocessor systems ; write-update : when a write operation is observed to a location that a cache has a copy of , the cache controller updates its own copy of the snooped memory location with the new data if the protocol design states that whenever any copy of the shared data is changed , all the other copies must be '' updated '' to reflect the change , then it is a write-update protocol 