in a shared memory multiprocessor system with a separate cache memory for each processor , it is possible to have many copies of shared data : one copy in the main memory and one in the local cache of each processor that requested it when one of the copies of data is changed , the other copies must reflect that change cache coherence is the discipline which ensures that the changes in the values of shared operands ( data ) are propagated throughout the system in a timely fashion the following are the requirements for cache coherence : ; write propagation : changes to the data in any cache must be propagated to other copies ( of that cache line ) in the peer caches ; transaction serialization : reads/writes to a single memory location must be seen by all processors in the same order one type of data occurring simultaneously in different cache memory is called cache coherence , or in some systems , global memory in a multiprocessor system , consider that more than one processor has cached a copy of the memory location x propagating the writes to the shared memory location ensures that all the caches have a coherent view of the memory if processor p1 reads the old value of x , even after the write by p2 , we can say that the memory is incoherent the above conditions satisfy the write propagation criteria required for cache coherence another definition is : '' a multiprocessor is cache consistent if all writes to the same memory location are performed in some sequential order '' multiple copies of same data can exist in different cache simultaneously and if processors are allowed to update their own copies freely , an inconsistent view of memory can result ; write-update : when a write operation is observed to a location that a cache has a copy of , the cache controller updates its own copy of the snooped memory location with the new data 