in a shared memory multiprocessor system with a separate cache memory for each processor , it is possible to have many copies of shared data : one copy in the main memory and one in the local cache of each processor that requested it cache coherence is the discipline which ensures that the changes in the values of shared operands ( data ) are propagated throughout the system in a timely fashion the following are the requirements for cache coherence : ; write propagation : changes to the data in any cache must be propagated to other copies ( of that cache line ) in the peer caches theoretically , coherence can be performed at the load/store granularity however , in practice it is generally performed at the granularity of cache blocks coherence defines the behavior of reads and writes to a single address location one type of data occurring simultaneously in different cache memory is called cache coherence , or in some systems , global memory in a multiprocessor system , consider that more than one processor has cached a copy of the memory location x propagating the writes to the shared memory location ensures that all the caches have a coherent view of the memory however , p3 may see the change made by p1 after seeing the change made by p2 and hence return 10 on a read to s : in a directory-based system , the data being shared is placed in a common directory that maintains the coherence between caches ; write-update : when a write operation is observed to a location that a cache has a copy of , the cache controller updates its own copy of the snooped memory location with the new data consistency model directory-based coherence memory barrier non-uniform memory access ( numa ) false sharing 