. what problems can the observer design pattern solve ? the observer pattern addresses the following problems : a one-to-many dependency between objects should be defined without making the objects tightly coupled it should be ensured that when one object changes state , an open-ended number of dependent objects are updated automatically so that when a subject changes state , all registered observers are notified and updated automatically ( and probably asynchronously ) the responsibility of observers is to register ( and unregister ) themselves on a subject ( to get notified of state changes ) and to update their state ( synchronize their state with the subject 's state ) when they are notified typically , the observer pattern is implemented so the '' subject '' being '' observed '' is part of the object for which state changes are being observed ( and communicated to the observers ) other implementations of the publish-subscribe pattern , which achieve a similar effect of notification and communication to interested parties , do not use the observer pattern at all instead , subject refers to the observer interface ( update ( ) ) for updating state , which makes the subject independent of how the state of dependent objects is updated the uml sequence diagram shows the run-time interactions : the observer1 and observer2 objects call attach ( this ) on subject1 to register themselves notify ( ) calls update ( ) on the registered observer1 and observer2 objects , which request the changed data ( getstate ( ) ) from subject1 to update ( synchronize ) their state 