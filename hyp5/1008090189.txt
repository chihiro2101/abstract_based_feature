. what problems can the observer design pattern solve ? it should be ensured that when one object changes state , an open-ended number of dependent objects are updated automatically defining a one-to-many dependency between objects by defining one object ( subject ) that updates the state of dependent objects directly is inflexible because it couples the subject to particular dependent objects so that when a subject changes state , all registered observers are notified and updated automatically ( and probably asynchronously ) the sole responsibility of a subject is to maintain a list of observers and to notify them of state changes by calling their update ( ) operation the responsibility of observers is to register ( and unregister ) themselves on a subject ( to get notified of state changes ) and to update their state ( synchronize their state with the subject 's state ) when they are notified typically , the observer pattern is implemented so the '' subject '' being '' observed '' is part of the object for which state changes are being observed ( and communicated to the observers ) other implementations of the publish-subscribe pattern , which achieve a similar effect of notification and communication to interested parties , do not use the observer pattern at all instead , subject refers to the observer interface ( update ( ) ) for updating state , which makes the subject independent of how the state of dependent objects is updated the observer1 and observer2 classes implement the observer interface by synchronizing their state with subject 's state 