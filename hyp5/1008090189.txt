the observer design pattern is one of the twenty-three well-known design patterns describing how to solve recurring design challenges in order to design flexible and reusable object-oriented software , i.e . what problems can the observer design pattern solve ? the observer pattern addresses the following problems : a one-to-many dependency between objects should be defined without making the objects tightly coupled define subject and observer objects so that when a subject changes state , all registered observers are notified and updated automatically ( and probably asynchronously ) the sole responsibility of a subject is to maintain a list of observers and to notify them of state changes by calling their update ( ) operation the responsibility of observers is to register ( and unregister ) themselves on a subject ( to get notified of state changes ) and to update their state ( synchronize their state with the subject 's state ) when they are notified typically , the observer pattern is implemented so the '' subject '' being '' observed '' is part of the object for which state changes are being observed ( and communicated to the observers ) the observer1 and observer2 classes implement the observer interface by synchronizing their state with subject 's state notify ( ) calls update ( ) on the registered observer1 and observer2 objects , which request the changed data ( getstate ( ) ) from subject1 to update ( synchronize ) their state 