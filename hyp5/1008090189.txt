the observer pattern addresses the following problems : a one-to-many dependency between objects should be defined without making the objects tightly coupled it should be ensured that when one object changes state , an open-ended number of dependent objects are updated automatically defining a one-to-many dependency between objects by defining one object ( subject ) that updates the state of dependent objects directly is inflexible because it couples the subject to particular dependent objects define subject and observer objects the responsibility of observers is to register ( and unregister ) themselves on a subject ( to get notified of state changes ) and to update their state ( synchronize their state with the subject 's state ) when they are notified typically , the observer pattern is implemented so the '' subject '' being '' observed '' is part of the object for which state changes are being observed ( and communicated to the observers ) other implementations of the publish-subscribe pattern , which achieve a similar effect of notification and communication to interested parties , do not use the observer pattern at all in the above uml class diagram , the subject class does not update the state of dependent objects directly instead , subject refers to the observer interface ( update ( ) ) for updating state , which makes the subject independent of how the state of dependent objects is updated notify ( ) calls update ( ) on the registered observer1 and observer2 objects , which request the changed data ( getstate ( ) ) from subject1 to update ( synchronize ) their state 