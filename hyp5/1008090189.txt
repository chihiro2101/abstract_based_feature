the observer design pattern is one of the twenty-three well-known design patterns describing how to solve recurring design challenges in order to design flexible and reusable object-oriented software , i.e it should be ensured that when one object changes state , an open-ended number of dependent objects are updated automatically still , it can make sense from a performance point of view or if the object implementation is tightly coupled ( think of low-level kernel structures that execute thousands of times a second ) so that when a subject changes state , all registered observers are notified and updated automatically ( and probably asynchronously ) the sole responsibility of a subject is to maintain a list of observers and to notify them of state changes by calling their update ( ) operation the responsibility of observers is to register ( and unregister ) themselves on a subject ( to get notified of state changes ) and to update their state ( synchronize their state with the subject 's state ) when they are notified typically , the observer pattern is implemented so the '' subject '' being '' observed '' is part of the object for which state changes are being observed ( and communicated to the observers ) other implementations of the publish-subscribe pattern , which achieve a similar effect of notification and communication to interested parties , do not use the observer pattern at all below is an example written in java that takes keyboard input and treats each input line as an event when a string is supplied from system.in , the method notifyobservers is then called , in order to notify all observers of the event 's occurrence , in the form of an invocation of their 'update ' methods 