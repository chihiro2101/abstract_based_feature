an important distinction in programming languages is the difference between an object-oriented language and an object-based language polymorphism refers to the ability to overload the name of a function with multiple behaviors based on which object ( s ) are passed to it conventional message passing discriminates only on the first object and considers that to be '' sending a message '' to that object an object is an abstract data type with the addition of polymorphism and inheritance rather than structure programs as code and data , an object-oriented system integrates the two using the concept of an '' object '' an object has state ( data ) and behavior ( code ) immutable object : an object set up with a fixed state at creation time and which does not change afterward first-class object : an object that can be used without restriction factory object : an object whose purpose is to create other objects metaobject : an object from which other objects can be created ( compare with a class , which is not necessarily an object ) prototype object : a specialized metaobject from which other objects can be created by copying god object : an object that knows or does too much ( it is an example of an anti-pattern ) filter object : an object that receives a stream of data as its input and transforms it into the object 's output owl objects are not like standard large-grained distributed objects accessed via an interface definition language object lifetime object copy design pattern ( computer science ) business object ( computer science ) actor model 