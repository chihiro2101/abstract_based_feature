the complexity class np may be viewed as a very simple proof system in this system , the verifier is a deterministic , polynomial-time machine ( a p machine ) the protocol is : the prover looks at the input and computes the solution using its unlimited power and returns a polynomial-size proof certificate in the case where a valid proof certificate exists , the prover is always able to make the verifier accept by giving it that certificate in the case where there is no valid proof certificate , however , the input is not in the language , and no prover , however malicious it is , can convince the verifier otherwise , because any proof certificate will be rejected also , instead of requiring that the verifier always accept valid certificates and reject invalid certificates , it is more lenient : completeness : if the string is in the language , the prover must be able to give a certificate such that the verifier will accept with probability at least 2/3 ( depending on the verifier 's random choices ) soundness : if the string is not in the language , no prover , however malicious , will be able to convince the verifier to accept the string with probability exceeding 1/3 in a public coin protocol , the random choices made by the verifier are made public in arthur–merlin protocols , babai defined a similar class amf ( n ) which allowed f ( n ) rounds , but he put one extra condition on the machine : the verifier must show the prover all the random bits it uses in its computation the result is that the verifier can not '' hide '' anything from the prover , because the prover is powerful enough to simulate everything the verifier does if it knows what random bits it used the essential problem with public coins is that if the prover wishes to maliciously convince the verifier to accept a string which is not in the language , it seems like the verifier might be able to thwart its plans if it can hide its internal state from it showed , perhaps surprisingly , that the verifier 's ability to hide coin flips from the prover does it little good after all , in that an arthur–merlin public coin protocol with only two more rounds can recognize all the same languages if we allow the probabilistic verifier machine and the all-powerful prover to interact for a polynomial number of rounds , we get the class of problems called ip in 1992 , adi shamir revealed in one of the central results of complexity theory that ip equals pspace , the class of problems solvable by an ordinary deterministic turing machine in polynomial space if we allow the elements of the system to use quantum computation , the system is called a quantum interactive proof system , and the corresponding complexity class is called qip one goal of ip 's designers was to create the most powerful possible interactive proof system , and at first it seems like it can not be made more powerful without making the verifier more powerful and so impractical it is known that for any constant k , a mip system with k provers and polynomially many rounds can be turned into an equivalent system with only 2 provers , and a constant number of rounds 