the complexity class np may be viewed as a very simple proof system in this system , the verifier is a deterministic , polynomial-time machine ( a p machine ) the protocol is : the prover looks at the input and computes the solution using its unlimited power and returns a polynomial-size proof certificate in the case where a valid proof certificate exists , the prover is always able to make the verifier accept by giving it that certificate in the case where there is no valid proof certificate , however , the input is not in the language , and no prover , however malicious it is , can convince the verifier otherwise , because any proof certificate will be rejected one approach , by lászló babai , who published '' trading group theory for randomness '' , lászló babai in this presentation , arthur ( the verifier ) is a probabilistic , polynomial-time machine , while merlin ( the prover ) has unbounded resources also , instead of requiring that the verifier always accept valid certificates and reject invalid certificates , it is more lenient : completeness : if the string is in the language , the prover must be able to give a certificate such that the verifier will accept with probability at least 2/3 ( depending on the verifier 's random choices ) soundness : if the string is not in the language , no prover , however malicious , will be able to convince the verifier to accept the string with probability exceeding 1/3 in a public coin protocol , the random choices made by the verifier are made public in the same conference where babai defined his proof system for ma , shafi goldwasser , silvio micali and charles rackoff extended abstract published a paper defining the interactive proof system ipf ( n ) this has the same machines as the ma protocol , except that f ( n ) rounds are allowed for an input of size n in arthur–merlin protocols , babai defined a similar class amf ( n ) which allowed f ( n ) rounds , but he put one extra condition on the machine : the verifier must show the prover all the random bits it uses in its computation the essential problem with public coins is that if the prover wishes to maliciously convince the verifier to accept a string which is not in the language , it seems like the verifier might be able to thwart its plans if it can hide its internal state from it showed , perhaps surprisingly , that the verifier 's ability to hide coin flips from the prover does it little good after all , in that an arthur–merlin public coin protocol with only two more rounds can recognize all the same languages if we allow the probabilistic verifier machine and the all-powerful prover to interact for a polynomial number of rounds , we get the class of problems called ip at first it seems impossible that the verifier could be convinced that there is a solution when the verifier has not seen a certificate , but such proofs , known as zero-knowledge proofs are in fact believed to exist for all problems in np and are valuable in cryptography 