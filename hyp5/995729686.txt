the complexity class np may be viewed as a very simple proof system in this system , the verifier is a deterministic , polynomial-time machine ( a p machine ) the protocol is : the prover looks at the input and computes the solution using its unlimited power and returns a polynomial-size proof certificate the verifier verifies that the certificate is valid in deterministic polynomial time in the case where a valid proof certificate exists , the prover is always able to make the verifier accept by giving it that certificate in the case where there is no valid proof certificate , however , the input is not in the language , and no prover , however malicious it is , can convince the verifier otherwise , because any proof certificate will be rejected although np may be viewed as using interaction , it was n't until 1985 that the concept of computation through interaction was conceived ( in the context of complexity theory ) by two independent groups of researchers in this presentation , arthur ( the verifier ) is a probabilistic , polynomial-time machine , while merlin ( the prover ) has unbounded resources soundness : if the string is not in the language , no prover , however malicious , will be able to convince the verifier to accept the string with probability exceeding 1/3 in the same conference where babai defined his proof system for ma , shafi goldwasser , silvio micali and charles rackoff extended abstract published a paper defining the interactive proof system ipf ( n ) in each round , the verifier performs computation and passes a message to the prover , and the prover performs computation and passes information back to the verifier for example , in an ip3 protocol , the sequence would be vpvpvpv , where v is a verifier turn and p is a prover turn the result is that the verifier can not '' hide '' anything from the prover , because the prover is powerful enough to simulate everything the verifier does if it knows what random bits it used this is called a public coin protocol , because the random bits ( '' coin flips '' ) are visible to both machines showed , perhaps surprisingly , that the verifier 's ability to hide coin flips from the prover does it little good after all , in that an arthurâ€“merlin public coin protocol with only two more rounds can recognize all the same languages not only can interactive proof systems solve problems not believed to be in np , but under assumptions about the existence of one-way functions , a prover can convince the verifier of the solution without ever giving the verifier information about the solution while the designers of ip considered generalizations of babai 's interactive proof systems , others considered restrictions 